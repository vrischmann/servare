<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on Tailscale</title>
    <link>https://tailscale.com/blog/</link>
    <description>Recent content in Blog on Tailscale</description>
    <language>en-US</language>
    <lastBuildDate>Tue, 13 Apr 2021 23:22:03 +0000</lastBuildDate>
    
	<atom:link href="https://tailscale.com/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Tailscale for DevOps: Connect to any subnet in your tailnet with Connecti (by Pulumi)</title>
      
      
      <link>https://tailscale.com/blog/pulumi-connecti/</link>
      <pubDate>Fri, 16 Dec 2022 21:00:00 +0000</pubDate>
        <author>Jeff Spencer</author>
      <guid>https://tailscale.com/blog/pulumi-connecti/</guid>
      <description>&lt;p&gt;When setting up cloud infrastructure for your team, it often makes sense to provision sensitive services in private subnets. However, this usually means that those services are not easily accessible from your personal devices or CI/CD infrastructure. Tailscale already makes it possible to access those services by adding a private &lt;a href=&#34;https://tailscale.com/kb/1019/subnets/&#34;&gt;subnet router&lt;/a&gt; to your tailnet. But what happens if you need to quickly access something in a private subnet and then immediately terminate that connection?&lt;/p&gt;
&lt;p&gt;Most organizations already have existing infrastructure, so the need to access or debug something in a private subnet is a relatively frequent problem. That’s why Pulumi has worked hard to create a way to quickly provision ephemeral VPN connections that you can spin up and tear down quickly. &lt;a href=&#34;https://connecti.cloud/&#34;&gt;Connecti&lt;/a&gt; is a command line tool written in the Go programming language using Pulumi’s automation API, that allows you to declaratively provision Tailscale subnet routers in seconds without writing a single line of infrastructure code.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.pulumi.com/&#34;&gt;Pulumi&lt;/a&gt; is an open source infrastructure as code platform for creating, deploying, and managing cloud infrastructure. Pulumi works with both traditional infrastructures like VMs, networks, and databases, in addition to modern architectures such as containers, Kubernetes clusters, and serverless functions.&lt;/p&gt;
&lt;p&gt;Continue reading to learn more about Tailscale and Connecti from Pulumi software engineer and Connecti creator &lt;a href=&#34;https://www.pulumi.com/blog/author/lee-briggs/&#34;&gt;Lee Briggs&lt;/a&gt;.&lt;/p&gt;

    
    

&lt;figure class=&#34;image-wide&#34;&gt;
        &lt;img src=&#34;https://tailscale.com/blog/pulumi-connecti/tailscale-pulumi.svg&#34; alt=&#34;Tailscale logo connecting to the Pulumi logo&#34; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;As with most things in life, “right” and “wrong” in cloud engineering terms exist on a continuum rather than as binary concepts. There are “best practices,” “what’s right for your org,” and “this is a bad idea but we’re in a time crunch.”&lt;/p&gt;
&lt;p&gt;Something, however, that most people agree on is that exposing sensitive services to the public internet unnecessarily is a &lt;em&gt;bad idea&lt;/em&gt;. Doing so can create challenges in the isolated network of your cloud provider and raise questions like, “How do I create tables in this private database?” and “How do I get into that random server to see why my service is failing?” These are both common questions in the Pulumi community that are ultimately &lt;em&gt;networking&lt;/em&gt; problems, rather than &lt;em&gt;infrastructure&lt;/em&gt; problems.&lt;/p&gt;
&lt;p&gt;You can see this issue in practice with this Pulumi YAML code that provisions an AWS VPC and an AWS RDS database in private subnets:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;vpc_rds&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;A minimal Pulumi YAML program&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;runtime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;yaml&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;vpcNetworkCidr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;10.0.0.0&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/16&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;variables&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Create a VPC for the RDS instance&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;vpc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;awsx:ec2:Vpc&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;properties&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;enableDnsHostnames&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cidrBlock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;${vpcNetworkCidr}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# generate a random password&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;random:RandomPassword&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;properties&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;special&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;overrideSpecial&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;_%@&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Create a subnet group for private subnets&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;subnetgroup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;aws:rds:SubnetGroup&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;properties&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;subnetIds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;${vpc.privateSubnetIds}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# provision an RDS database&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;db&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;aws:rds:Instance&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;properties&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;instanceClass&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;db.t3.micro&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;allocatedStorage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;engine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;mysql&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;username&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;example&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;${password.result}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;dbSubnetGroupName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;${subnetgroup.name}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;skipFinalSnapshot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;outputs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;dbAddress&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;${db.endpoint}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;vpcId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;${vpc.vpcId}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To access this database, or any other infrastructure that isn’t publically accessible, you need a way to connect to that private (not routed to the global internet) network. There are a few options to work around this: One of the most common ways is to provision a bastion host that has connectivity to both the public internet and that private network. This will let you jump through that host to your private network. You can also skip needing to use that bastion at all by setting up a virtual private network (VPN) and adding your machine to that network, which makes the bastion host unnecessary.&lt;/p&gt;
&lt;p&gt;As a fan of Tailscale, I often find myself reaching for it in these circumstances. Tailscale’s &lt;a href=&#34;https://tailscale.com/kb/1019/subnets/&#34;&gt;subnet router&lt;/a&gt; feature gives you the ability to connect to all of the servers in your VPC as though they were on the same network as you. No custom TLS certificate authorities or arcane knowledge in tools such as OpenVPN or StrongSwan is required. It just works!&lt;/p&gt;
&lt;p&gt;To make it easier to connect to the cloud providers that I use every day, supporting Pulumi customers and community members, I created a Pulumi Package that abstracts almost all of the complexity of setting this up away from end users. To revisit the private database example earlier, simply including the &lt;code&gt;pulumi-tailscalebastion&lt;/code&gt; package automatically connects me to my cloud provider’s private network and allows Pulumi to provision infrastructure quickly and easily.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;vpc_rds&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;A minimal Pulumi YAML program&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;runtime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;yaml&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;vpcNetworkCidr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;10.0.0.0&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/16&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;variables&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Create a VPC for the RDS instance&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;vpc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;awsx:ec2:Vpc&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;properties&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;enableDnsHostnames&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cidrBlock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;${vpcNetworkCidr}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# generate a random password&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;random:RandomPassword&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;properties&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;special&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;overrideSpecial&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;_%@&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Create a subnet group for private subnets&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;subnetgroup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;aws:rds:SubnetGroup&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;properties&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;subnetIds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;${vpc.privateSubnetIds}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# add a bastion host so we can connect to the private address&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;bastion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;tailscale-bastion:aws:Bastion&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;properties&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;vpcId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;${vpc.vpcId}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;subnetIds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;${vpc.privateSubnetIds}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;route&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;10.0.0.0/16&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;region&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;us-west-2&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# provision an RDS database&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;db&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;aws:rds:Instance&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;properties&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;instanceClass&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;db.t3.micro&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;allocatedStorage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;engine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;mysql&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;username&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;example&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;${password.result}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;dbSubnetGroupName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;${subnetgroup.name}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;skipFinalSnapshot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;outputs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;dbAddress&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;${db.endpoint}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;vpcId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;${vpc.vpcId}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is great if you’re using &lt;a href=&#34;https://www.pulumi.com/&#34;&gt;Pulumi&lt;/a&gt; as your infrastructure as code solution (and if you’re not, you should be!) but what if you have existing infrastructure and need to debug something in a private network? What if you just want to quickly jump into your remote database to check why your application isn’t working, or verify why some user data hasn’t worked correctly from some logs?&lt;/p&gt;
&lt;p&gt;This is a problem I run into on a regular basis. It comes up so often, that I wanted to create a way to quickly provision ephemeral VPN connections that I can spin up and tear down quickly.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://connecti.cloud/&#34;&gt;Connecti&lt;/a&gt; is a tool which does just that. Connecti is a command line tool written in the Go programming language using Pulumi’s automation API, that allows you to declaratively provision Tailscale subnet routers in seconds without writing a single line of infrastructure code.&lt;/p&gt;
&lt;p&gt;Simply install connecti, install Pulumi and pass your credentials, and you can run a single command to provision a resilient subnet router that you can quickly tear down once you’re finished.&lt;/p&gt;
&lt;p&gt;Connecti supports AWS, Azure, Google Cloud and Kubernetes, with plans to support other cloud providers like Digital Ocean and Scaleway in the future.&lt;/p&gt;
&lt;p&gt;Here’s an example of using connecti to create an ephemeral VPN to an AWS VPC.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;connecti connect aws --subnet-ids subnet-034f1681dafc333f1 --subnet-ids subnet-09551c6c7c56bf98f --subnet-ids subnet-011348d6fbe4ef4be --routes 172.20.0.0/24
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And here’s an example of connecting to a Kubernetes service network, allowing me to debug private services without needing to use &lt;code&gt;kubectl proxy&lt;/code&gt; or a service of type load balancer.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;connecti connect kubernetes --routes 10.100.0.0/16
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Destroying connections is as easy as running “disconnect” to remove the resources — Pulumi’s declarative engine removes the pain of keeping track of provisioned resources, allowing connecti to do what it needs to in just a couple of hundreds of lines of Go code.&lt;/p&gt;
&lt;p&gt;Connecti works great with either Pulumi’s self-managed backends (which is usually an object store in your cloud provider) but if you leverage Pulumi’s free forever Individual tier in the Pulumi console, you can get full audit logs and historical records of every connecti bastion you ever create. Connecti will even print a handy link so you can follow along with its progress!&lt;/p&gt;
&lt;p&gt;Connecti is available now for Windows, Linux and OS X. If you ever find yourself thinking “I need access to that database!”, Connecti is a quick, free solution you can reach for. We look forward to you giving it a try!&lt;/p&gt;
&lt;p&gt;Join our upcoming workshop to &lt;a href=&#34;https://www.pulumi.com/resources/building-virtual-networks-with-pulumi-and-tailscale/&#34;&gt;learn how to build virtual networks with Tailscale and Pulumi&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>User and group provisioning for Okta is generally available</title>
      
      
      <link>https://tailscale.com/blog/sync-okta-ga/</link>
      <pubDate>Fri, 16 Dec 2022 00:00:00 +0000</pubDate>
      <author>Ramya Nagarajan, Jeff Spencer</author>
      <guid>https://tailscale.com/blog/sync-okta-ga/</guid>
      <description>&lt;p&gt;We’re pleased to announce that &lt;a href=&#34;https://tailscale.com/kb/1180/sso-okta-scim/&#34;&gt;user &amp;amp; group provisioning for Okta&lt;/a&gt; is now &lt;a href=&#34;https://tailscale.com/kb/1167/release-stages/#general-availability-ga&#34;&gt;generally available&lt;/a&gt;. You can sync group membership and deactivated users from Okta, and refer to a synced group as part of an access rule in your tailnet policy file.&lt;/p&gt;
&lt;p&gt;Onboarding and offboarding are two of the most challenging operational issues that companies face today. When employees are hired, change teams, or exit, admins usually must complete a manual process to update permissions or deactivate the user. That’s why we’re making it easier to manage users and devices by syncing directly with your identity provider — in this case, Okta!&lt;/p&gt;
&lt;p&gt;With user &amp;amp; group provisioning for Okta, admins can select groups that have been predefined in Okta and automatically push those groups to Tailscale — including any changes made to the group’s name and users. Groups defined in Okta can be referenced directly in access rules in your &lt;a href=&#34;https://tailscale.com/kb/1018/acls/&#34;&gt;tailnet policy file&lt;/a&gt;, and those groups stay up to date with changes to the organization; this eliminates the need for manual inputs when employees change teams or join or leave groups.&lt;/p&gt;
&lt;p&gt;Read the &lt;a href=&#34;https://tailscale.com/kb/1180/sso-okta-scim/&#34;&gt;documentation&lt;/a&gt; to learn more or set it up.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Postgres Crunchy Bridge with Tailscale</title>
      
      
      <link>https://tailscale.com/blog/crunchy-bridge/</link>
      <pubDate>Thu, 15 Dec 2022 00:00:00 +0000</pubDate>
      <author>Maya Kaczorowski</author>
      <guid>https://tailscale.com/blog/crunchy-bridge/</guid>
      <description>&lt;p&gt;Today we are happy to announce that &lt;a href=&#34;https://www.crunchydata.com/blog/crunchy-bridge-with-tailscale&#34;&gt;Crunchy Bridge has integrated with Tailscale&lt;/a&gt; to provide easy access to your database from any of your devices, wherever they are running. &lt;a href=&#34;https://www.crunchydata.com/products/crunchy-bridge&#34;&gt;Crunchy Bridge&lt;/a&gt; is a managed Postgres product that runs your database for you on your choice of cloud.&lt;/p&gt;

    
    

&lt;figure class=&#34;image-wide&#34;&gt;
        &lt;img src=&#34;https://tailscale.com/blog/crunchy-bridge/tailscale-crunchy.png&#34; alt=&#34;Tailscale logo connecting to Crunchy Data logo&#34; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;Securing access to databases is &lt;a href=&#34;https://tailscale.com/blog/introducing-pgproxy/&#34;&gt;tricky business&lt;/a&gt;. There is nothing more important to keep away from the general internet than your database, and simultaneously it is the critical piece of infrastructure your applications and your developers need to access.&lt;/p&gt;
&lt;p&gt;Crunchy Bridge is one answer to that problem, keeping your data available and backed up, while providing an API for automating management and scaling, and integrating popular PostgreSQL extensions. This makes it easy to go beyond the limits of a single-cloud provider’s VPC peering system, either for multi-cloud environments, cloud migrations, or to reach developer infrastructure where it is.&lt;/p&gt;
&lt;p&gt;To use the Crunchy Bridge integration, generate an auth key in the Tailscale admin console and add the key to your Crunch Bridge cluster settings under &lt;strong&gt;Networking&lt;/strong&gt;. Your Postgres instance to appears on your tailnet — so you can access it from anywhere. You can then use Tailscale’s network &lt;a href=&#34;https://tailscale.com/kb/1018/acls/&#34;&gt;access control features&lt;/a&gt; to limit exactly who and what on your tailnet can reach your database.&lt;/p&gt;
&lt;p&gt;To learn more, read &lt;a href=&#34;https://www.crunchydata.com/blog/crunchy-bridge-with-tailscale&#34;&gt;Crunchy Bridge’s blog post&lt;/a&gt;. See &lt;a href=&#34;https://tailscale.com/kb/1231/crunchy-bridge/&#34;&gt;our documentation&lt;/a&gt; for instructions on using the integration.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Introducing tailnet lock: use Tailscale without trusting our infrastructure!</title>
      
      
      <link>https://tailscale.com/blog/tailnet-lock/</link>
      <pubDate>Wed, 14 Dec 2022 00:00:00 +0000</pubDate>
      <author>Tom D&#39;Netto, Adrian Dewhurst</author>
      <guid>https://tailscale.com/blog/tailnet-lock/</guid>
      <description>&lt;p&gt;Users sometimes ask us, “How can I trust Tailscale?” From the beginning, we’ve tried to make it so you don’t have to, by &lt;a href=&#34;https://tailscale.com/blog/how-tailscale-works/&#34;&gt;architecting our infrastructure&lt;/a&gt; with security and privacy in mind. When you use Tailscale, your data is end-to-end encrypted. Tailscale doesn’t have the private key, so we can’t see your traffic. While Tailscale can’t observe the data transiting your tailnet, we &lt;em&gt;are&lt;/em&gt; responsible for managing the control plane, where our coordination server distributes public keys and settings for your tailnet.&lt;/p&gt;
&lt;p&gt;Which brings us to one glaring issue that has remained with our architecture: You have still needed to trust our coordination server. What if we were malicious, and stealthily inserted new nodes into your network? Tailscale could hypothetically use a secretly-added node to send or receive traffic to your existing nodes — meaning it wouldn’t matter that the traffic is encrypted because the peer itself would be malicious.&lt;/p&gt;
&lt;p&gt;You should decide who to trust when it comes to your tailnet’s coordination server and how nodes are added to your tailnet. We don’t want you to have to trust us to get it right. &lt;strong&gt;So today, we’re taking the first steps with &lt;a href=&#34;https://tailscale.com/kb/1226/tailnet-lock&#34;&gt;tailnet lock&lt;/a&gt;, a security feature where your nodes verify the public keys distributed by the coordination server before trusting them for network connectivity.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;lock-out-untrusted-nodes&#34;&gt;Lock out untrusted nodes&lt;/h3&gt;
&lt;p&gt;When you install Tailscale and authenticate a device, &lt;a href=&#34;https://tailscale.com/blog/tailscale-key-management/#node-keys&#34;&gt;a node keypair&lt;/a&gt; is automatically generated — that’s the static keypair used as part of the &lt;a href=&#34;https://www.wireguard.com/papers/wireguard.pdf&#34;&gt;WireGuard® protocol&lt;/a&gt;. The private key stays on the device, and the public key is shared with the Tailscale coordination server. The coordination server then distributes that public key to other existing nodes in your tailnet &lt;a href=&#34;https://tailscale.com/kb/1087/device-visibility/#which-devices-can-i-see-which-devices-can-see-my-device&#34;&gt;the new device is allowed to connect to&lt;/a&gt;, based on ACLs.&lt;/p&gt;

    
    

&lt;figure class=&#34;image-wide&#34;&gt;
        &lt;img src=&#34;https://tailscale.com/blog/tailnet-lock/without-lock.svg&#34; alt=&#34;Without tailnet lock, when a new node is added to the tailnet, its public key is distributed to peer nodes by the coordination server.&#34; /&gt;
    
    &lt;figcaption&gt;
        &lt;p&gt;Without tailnet lock, when a new node is added to the tailnet, its public key is distributed to peer nodes by the coordination server.&lt;/p&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;With tailnet lock enabled, we add an extra step. Existing nodes still receive new nodes’ public keys from the coordination server, but don’t immediately trust them — the new node is &lt;em&gt;locked out&lt;/em&gt;. New nodes added to your tailnet must be signed by a trusted tailnet lock key before they are allowed to connect to other nodes, and you decide which tailnet lock keys your tailnet’s existing nodes will trust. (In nerd-speak, we can say that your Tailscale nodes will only trust a node public key from Tailscale’s coordination server if it is endorsed by a cryptographic signature using tailnet-controlled tailnet lock keys.) The coordination server doesn’t generate, store, or see the tailnet lock key material, so even if the coordination server were compromised, it couldn’t sign a new node and have it participate in your tailnet.&lt;/p&gt;

    
    

&lt;figure class=&#34;image-wide&#34;&gt;
        &lt;img src=&#34;https://tailscale.com/blog/tailnet-lock/with-lock.svg&#34; alt=&#34;With tailnet lock, when a new node is added to the tailnet, it is signed by a trusted tailnet lock key, then distributed to peer nodes, which can verify the signature before allowing connections.&#34; /&gt;
    
    &lt;figcaption&gt;
        &lt;p&gt;With tailnet lock, when a new node is added to the tailnet, it is signed by a trusted tailnet lock key, then distributed to peer nodes, which can verify the signature before allowing connections.&lt;/p&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;As with any security technology, the devil is in the details. A crypto-scheme based on endorsing one set of key material (WireGuard node keys) with another (tailnet lock keys) introduces a new problem, as nodes now need some way to track which tailnet lock keys are trusted. So how do nodes decide which tailnet lock keys to trust?&lt;/p&gt;
&lt;h3 id=&#34;the-tailnet-key-authority-tells-your-nodes-which-keys-to-trust&#34;&gt;The tailnet key authority tells your nodes which keys to trust&lt;/h3&gt;
&lt;p&gt;To determine which tailnet lock keys to trust, nodes implement a new subsystem, the &lt;em&gt;tailnet key authority&lt;/em&gt;, to track and update the set of tailnet lock keys that can be used to sign node keys.&lt;/p&gt;

    
    

&lt;figure class=&#34;image-wide&#34;&gt;
        &lt;img src=&#34;https://tailscale.com/blog/tailnet-lock/new-lock-key.svg&#34; alt=&#34;Before a new trusted tailnet lock key is added, it must be signed by an existing trusted tailnet lock key. The coordination server distributes the new key to all nodes in the tailnet, which can verify the signature before trusting it.&#34; /&gt;
    
    &lt;figcaption&gt;
        &lt;p&gt;Before a new trusted tailnet lock key is added, it must be signed by an existing trusted tailnet lock key. The coordination server distributes the new key to all nodes in the tailnet, which can verify the signature before trusting it.&lt;/p&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Tailnet lock keys are automatically generated by every node in your tailnet — but you select which ones to trust. (For now, these keys are stored on disk in each node, but in the future we hope to support more secure storage mediums, such as TPMs and FIDO2 keys.)&lt;/p&gt;
&lt;p&gt;When tailnet lock is first enabled, you specify an initial set of tailnet lock keys to sign all node keys within the tailnet. This set of trusted tailnet lock keys is also distributed to the existing nodes. From that moment on, your tailnet is locked, and all new node keys must be endorsed using an existing tailnet lock key.&lt;/p&gt;
&lt;p&gt;Changing the set of trusted tailnet lock keys to add or remove a key is done by encoding and signing the change with an existing tailnet lock key, which is then published across the tailnet.&lt;/p&gt;
&lt;h3 id=&#34;enable-tailnet-lock&#34;&gt;Enable tailnet lock&lt;/h3&gt;
&lt;p&gt;To get started with tailnet lock, request access from the &lt;a href=&#34;https://login.tailscale.com/admin/settings/features&#34;&gt;Feature Previews&lt;/a&gt; page of the admin console.&lt;/p&gt;
&lt;p&gt;Update nodes in your tailnet to Tailscale v1.34 or later.&lt;/p&gt;
&lt;p&gt;For the nodes whose tailnet lock keys you want to trust, get the public key on each node by running:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;tailscale lock status
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We recommend setting up tailnet lock with multiple trusted nodes.&lt;/p&gt;
&lt;p&gt;Next, decide the number of disablement secrets you wish to use. Disablement secrets are used to disable tailnet lock. We recommend you use at least two, and store these securely, such as in a password manager or secret vault. You can optionally generate an extra disablement secret that is automatically passed to Tailscale support, so we can disable tailnet lock in case of an issue with how we’ve implemented it.&lt;/p&gt;
&lt;p&gt;Then, on any node in your tailnet, enable tailnet lock, specifying the X trusted tailnet lock keys, and the desired number of disablement secrets N:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;tailscale lock init --gen-disablements=N [--gen-disablement-for-support] tlpub:$trusted-tailnet-lock-key-1 … tlpub:$trusted-tailnet-lock-key-X
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The disablement secrets are printed out, all existing nodes in the tailnet are signed by the trusted tailnet lock keys, and tailnet lock is enabled.&lt;/p&gt;
&lt;p&gt;Learn more about how to set up tailnet lock for your tailnet in the &lt;a href=&#34;https://tailscale.com/kb/1226/tailnet-lock/&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt;
&lt;figure&gt;
  &lt;iframe width=&#34;100%&#34; height=&#34;360&#34; src=&#34;https://www.youtube.com/embed/N3vZrgrSz6g&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/figure&gt;
&lt;h3 id=&#34;the-a-in-alpha-is-for-almost&#34;&gt;The A in Alpha is for Almost&lt;/h3&gt;
&lt;p&gt;We’re excited to share tailnet lock with the world, but like all other security features, it’s important to us to get it right.&lt;/p&gt;
&lt;p&gt;We’d like to further improve the user experience of tailnet lock. Right now, all operations are done via the command line. And there are still some complications that our current implementation of tailnet lock doesn’t address, such as signing &lt;a href=&#34;https://tailscale.com/kb/1084/sharing/&#34;&gt;shared nodes&lt;/a&gt;. We have plans to address these issues but haven’t yet implemented them. As a result, we’re not making tailnet lock available to everyone just yet. If you’d like to test it out, request access for your tailnet from the &lt;a href=&#34;https://login.tailscale.com/admin/settings/features&#34;&gt;Feature Previews&lt;/a&gt; page of the admin console. We’ll open it up to a few tailnets at a time, so that we can address any issues you hit or feedback you have.&lt;/p&gt;
&lt;p&gt;We’re also publishing a more detailed white paper explaining how tailnet lock works, including cryptographic details on the key generation and signing used, the tailnet key authority, unlocking the tailnet, achieving consensus, and recovering from a tailnet lock key compromise. Interested parties can read up on the gory details in our &lt;a href=&#34;https://tailscale.com/kb/1230/tailnet-lock-whitepaper/&#34;&gt;tailnet lock white paper&lt;/a&gt;. &lt;a href=&#34;mailto:info@tailscale.com&#34;&gt;Email us&lt;/a&gt; to share any feedback you have.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Userspace isn&#39;t slow, some kernel interfaces are!</title>
      
      
      <link>https://tailscale.com/blog/throughput-improvements/</link>
      <pubDate>Tue, 13 Dec 2022 00:00:00 +0000</pubDate>
      <author>Jordan Whited, James Tucker</author>
      <guid>https://tailscale.com/blog/throughput-improvements/</guid>
      <description>&lt;p&gt;&lt;strong&gt;We made significant improvements to the throughput of &lt;a href=&#34;https://git.zx2c4.com/wireguard-go/about/&#34;&gt;wireguard-go&lt;/a&gt;, which is the userspace &lt;a href=&#34;https://www.wireguard.com/&#34;&gt;WireGuard&lt;/a&gt;® implementation that Tailscale uses. What this means for you: improved performance of the Tailscale client on Linux.&lt;/strong&gt; We intend to &lt;a href=&#34;https://github.com/WireGuard/wireguard-go/pull/64&#34;&gt;upstream these changes&lt;/a&gt; to WireGuard as well.&lt;/p&gt;
&lt;p&gt;You can experience these improvements in the current &lt;a href=&#34;https://pkgs.tailscale.com/unstable/&#34;&gt;unstable Tailscale client release&lt;/a&gt;, and also in Tailscale v1.36, available in early 2023. Read on to learn how we did it, or jump down to the &lt;a href=&#34;#results&#34;&gt;Results&lt;/a&gt; section if you just want numbers.&lt;/p&gt;
&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;
&lt;p&gt;The Tailscale client leverages wireguard-go, a userspace WireGuard implementation written in Go, for dataplane functionality. In Tailscale, wireguard-go receives unencrypted packets from the kernel, encrypts them, and sends them over a UDP socket to another WireGuard peer. The inverse flow is flipped — when receiving communications from a peer, wireguard-go first reads encrypted packets from a UDP socket, then decrypts them, and writes them back to the kernel. This is a simplified view of the pipeline inside of wireguard-go — the Tailscale client &lt;a href=&#34;https://tailscale.com/blog/how-tailscale-works/&#34;&gt;adds additional functionality&lt;/a&gt;, such as NAT traversal, access control, and key distribution.&lt;/p&gt;

    
    

&lt;figure class=&#34;image-wide&#34;&gt;
        &lt;img src=&#34;https://tailscale.com/blog/throughput-improvements/wireguard-go-data-flow.svg&#34; /&gt;
    
&lt;/figure&gt;

&lt;h2 id=&#34;baseline&#34;&gt;Baseline&lt;/h2&gt;
&lt;p&gt;Network performance is a complicated topic in large part because networked applications can have drastically different requirements and goals. In this post, we will focus on throughput. By throughput, we mean the amount of data that can be transferred between Tailscale clients within a given timeframe.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Disclaimer about benchmarks&lt;/strong&gt;: This post contains benchmarks! These benchmarks are reproducible at the time of writing, and we provide details about the environments we ran them in. Benchmark results tend to vary across environments, and they also tend to go stale as time progresses. Your mileage may vary.&lt;/p&gt;
&lt;p&gt;We’ll start with some baseline numbers for wireguard-go and in-kernel WireGuard. Toward the end we will show results of our changes. Throughput tests are conducted using &lt;a href=&#34;https://github.com/esnet/iperf&#34;&gt;iperf3&lt;/a&gt; over a single TCP stream, with cubic-flavored congestion control. Ubuntu 22.04 is the operating system on all hosts.&lt;/p&gt;
&lt;p&gt;For these baseline tests, we’ll use two c6i.8xlarge virtual hosts in AWS. These instances have fast network interfaces and sufficient CPU capacity to handle encryption at network speeds. They are in the same region and availability zone:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ubuntu@thru6:~$ ec2metadata &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep -E &lt;span class=&#34;s1&#34;&gt;&amp;#39;instance-type:|availability-zone:&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line hl&#34;&gt;&lt;span class=&#34;cl&#34;&gt;availability-zone: us-west-2d
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line hl&#34;&gt;&lt;span class=&#34;cl&#34;&gt;instance-type: c6i.8xlarge
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ubuntu@thru7:~$ ec2metadata &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep -E &lt;span class=&#34;s1&#34;&gt;&amp;#39;instance-type:|availability-zone:&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line hl&#34;&gt;&lt;span class=&#34;cl&#34;&gt;availability-zone: us-west-2d
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line hl&#34;&gt;&lt;span class=&#34;cl&#34;&gt;instance-type: c6i.8xlarge
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ubuntu@thru6:~$ ping 172.31.56.191 -c &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt; -q
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;PING 172.31.56.191 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;172.31.56.191&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; 56&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;84&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; bytes of data.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;--- 172.31.56.191 ping statistics ---
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt; packets transmitted, &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt; received, 0% packet loss, &lt;span class=&#34;nb&#34;&gt;time&lt;/span&gt; 4099ms
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line hl&#34;&gt;&lt;span class=&#34;cl&#34;&gt;rtt min/avg/max/mdev &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; 0.098/0.119/0.150/0.017 ms
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This first benchmark does not use wireguard-go. It sets a throughput baseline without any WireGuard overhead:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ubuntu@thru6:~$ iperf3 -i &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; -c 172.31.56.191 -t &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt; -C cubic -V
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;iperf 3.9
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Linux thru6 5.15.0-1026-aws &lt;span class=&#34;c1&#34;&gt;#30-Ubuntu SMP Wed Nov 23 14:15:21 UTC 2022 x86_64&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Control connection MSS &lt;span class=&#34;m&#34;&gt;8949&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Time: Thu, &lt;span class=&#34;m&#34;&gt;08&lt;/span&gt; Dec &lt;span class=&#34;m&#34;&gt;2022&lt;/span&gt; 19:29:39 GMT
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Connecting to host 172.31.56.191, port &lt;span class=&#34;m&#34;&gt;5201&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      Cookie: dcnjnuzjeobo4dne6djnj3waeq4dugc2fh7a
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line hl&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      TCP MSS: &lt;span class=&#34;m&#34;&gt;8949&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;default&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;  5&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;local&lt;/span&gt; 172.31.51.101 port &lt;span class=&#34;m&#34;&gt;40158&lt;/span&gt; connected to 172.31.56.191 port &lt;span class=&#34;m&#34;&gt;5201&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Starting Test: protocol: TCP, &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; streams, &lt;span class=&#34;m&#34;&gt;131072&lt;/span&gt; byte blocks, omitting &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; seconds, &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt; second test, tos &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; ID&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Interval           Transfer     Bitrate         Retr  Cwnd
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;  5&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;   0.00-10.00  sec  11.1 GBytes  9.53 Gbits/sec    &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;   1.29 MBytes
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- - - - - - - - - - - - - - - - - - - - - - - - -
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line hl&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Test Complete. Summary Results:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line hl&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; ID&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Interval           Transfer     Bitrate         Retr
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line hl&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;  5&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;   0.00-10.00  sec  11.1 GBytes  9.53 Gbits/sec    &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;             sender
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line hl&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;  5&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;   0.00-10.04  sec  11.1 GBytes  9.49 Gbits/sec                  receiver
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;CPU Utilization: local/sender 10.0% &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;0.2%u/9.7%s&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, remote/receiver 4.4% &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;0.3%u/4.0%s&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;snd_tcp_congestion cubic
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;rcv_tcp_congestion cubic
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This second benchmark uses in-kernel WireGuard:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ubuntu@thru6:~$ iperf3 -i &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; -c thru7-wg -t &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt; -C cubic -V
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;iperf 3.9
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Linux thru6 5.15.0-1026-aws &lt;span class=&#34;c1&#34;&gt;#30-Ubuntu SMP Wed Nov 23 14:15:21 UTC 2022 x86_64&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Control connection MSS &lt;span class=&#34;m&#34;&gt;1368&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Time: Thu, &lt;span class=&#34;m&#34;&gt;08&lt;/span&gt; Dec &lt;span class=&#34;m&#34;&gt;2022&lt;/span&gt; 19:58:24 GMT
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Connecting to host thru7-wg, port &lt;span class=&#34;m&#34;&gt;5201&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      Cookie: o5iu6xoxq47swoubx5un32monokel573kj6i
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line hl&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      TCP MSS: &lt;span class=&#34;m&#34;&gt;1368&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;default&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;  5&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;local&lt;/span&gt; 10.9.9.6 port &lt;span class=&#34;m&#34;&gt;46284&lt;/span&gt; connected to 10.9.9.7 port &lt;span class=&#34;m&#34;&gt;5201&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Starting Test: protocol: TCP, &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; streams, &lt;span class=&#34;m&#34;&gt;131072&lt;/span&gt; byte blocks, omitting &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; seconds, &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt; second test, tos &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; ID&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Interval           Transfer     Bitrate         Retr  Cwnd
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;  5&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;   0.00-10.00  sec  3.09 GBytes  2.66 Gbits/sec   &lt;span class=&#34;m&#34;&gt;81&lt;/span&gt;    &lt;span class=&#34;m&#34;&gt;987&lt;/span&gt; KBytes
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- - - - - - - - - - - - - - - - - - - - - - - - -
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line hl&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Test Complete. Summary Results:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line hl&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; ID&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Interval           Transfer     Bitrate         Retr
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line hl&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;  5&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;   0.00-10.00  sec  3.09 GBytes  2.66 Gbits/sec   &lt;span class=&#34;m&#34;&gt;81&lt;/span&gt;             sender
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line hl&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;  5&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;   0.00-10.05  sec  3.09 GBytes  2.64 Gbits/sec                  receiver
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;CPU Utilization: local/sender 5.2% &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;0.2%u/5.0%s&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, remote/receiver 5.9% &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;0.1%u/5.8%s&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;snd_tcp_congestion cubic
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;rcv_tcp_congestion cubic
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, over &lt;a href=&#34;https://git.zx2c4.com/wireguard-go/tree/?id=bb719d3a6e2cd20ec00f26d65c0073c1dde6b529&#34;&gt;wireguard-go@bb719d3&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ubuntu@thru6:~$ iperf3 -i &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; -c thru7-wg -t &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt; -C cubic -V
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;iperf 3.9
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Linux thru6 5.15.0-1026-aws &lt;span class=&#34;c1&#34;&gt;#30-Ubuntu SMP Wed Nov 23 14:15:21 UTC 2022 x86_64&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Control connection MSS &lt;span class=&#34;m&#34;&gt;1368&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Time: Thu, &lt;span class=&#34;m&#34;&gt;08&lt;/span&gt; Dec &lt;span class=&#34;m&#34;&gt;2022&lt;/span&gt; 19:30:49 GMT
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Connecting to host thru7-wg, port &lt;span class=&#34;m&#34;&gt;5201&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      Cookie: zg7hsb2jrbklpaqez2gzhdi2kyxr4ibne5lf
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line hl&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      TCP MSS: &lt;span class=&#34;m&#34;&gt;1368&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;default&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;  5&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;local&lt;/span&gt; 10.9.9.6 port &lt;span class=&#34;m&#34;&gt;51660&lt;/span&gt; connected to 10.9.9.7 port &lt;span class=&#34;m&#34;&gt;5201&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Starting Test: protocol: TCP, &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; streams, &lt;span class=&#34;m&#34;&gt;131072&lt;/span&gt; byte blocks, omitting &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; seconds, &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt; second test, tos &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; ID&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Interval           Transfer     Bitrate         Retr  Cwnd
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;  5&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;   0.00-10.00  sec  2.82 GBytes  2.42 Gbits/sec  &lt;span class=&#34;m&#34;&gt;4711&lt;/span&gt;    &lt;span class=&#34;m&#34;&gt;415&lt;/span&gt; KBytes
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- - - - - - - - - - - - - - - - - - - - - - - - -
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line hl&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Test Complete. Summary Results:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line hl&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; ID&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Interval           Transfer     Bitrate         Retr
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line hl&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;  5&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;   0.00-10.00  sec  2.82 GBytes  2.42 Gbits/sec  &lt;span class=&#34;m&#34;&gt;4711&lt;/span&gt;             sender
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line hl&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;  5&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;   0.00-10.04  sec  2.82 GBytes  2.41 Gbits/sec                  receiver
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;CPU Utilization: local/sender 5.7% &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;0.2%u/5.5%s&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, remote/receiver 7.3% &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;0.6%u/6.7%s&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;snd_tcp_congestion cubic
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;rcv_tcp_congestion cubic
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;One thing that’s interesting to note: The TCP MSS is much higher on the first test (more on MSS/MTU later if you are unfamiliar). AWS supports a 9001 byte IP MTU. What happens when we increase the MTU on the wireguard-go interface?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ubuntu@thru6:~$ iperf3 -i &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; -c thru7-wg -t &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt; -C cubic -V
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;iperf 3.9
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Linux thru6 5.15.0-1026-aws &lt;span class=&#34;c1&#34;&gt;#30-Ubuntu SMP Wed Nov 23 14:15:21 UTC 2022 x86_64&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Control connection MSS &lt;span class=&#34;m&#34;&gt;8869&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Time: Thu, &lt;span class=&#34;m&#34;&gt;08&lt;/span&gt; Dec &lt;span class=&#34;m&#34;&gt;2022&lt;/span&gt; 19:33:21 GMT
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Connecting to host thru7-wg, port &lt;span class=&#34;m&#34;&gt;5201&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      Cookie: ov4nsnsdfxomict4cu2cxy2iwt4ncpi364d4
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line hl&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      TCP MSS: &lt;span class=&#34;m&#34;&gt;8869&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;default&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;  5&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;local&lt;/span&gt; 10.9.9.6 port &lt;span class=&#34;m&#34;&gt;43416&lt;/span&gt; connected to 10.9.9.7 port &lt;span class=&#34;m&#34;&gt;5201&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Starting Test: protocol: TCP, &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; streams, &lt;span class=&#34;m&#34;&gt;131072&lt;/span&gt; byte blocks, omitting &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; seconds, &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt; second test, tos &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; ID&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Interval           Transfer     Bitrate         Retr  Cwnd
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;  5&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;   0.00-10.00  sec  9.17 GBytes  7.88 Gbits/sec  &lt;span class=&#34;m&#34;&gt;1854&lt;/span&gt;   1.54 MBytes
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- - - - - - - - - - - - - - - - - - - - - - - - -
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line hl&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Test Complete. Summary Results:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line hl&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; ID&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Interval           Transfer     Bitrate         Retr
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line hl&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;  5&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;   0.00-10.00  sec  9.17 GBytes  7.88 Gbits/sec  &lt;span class=&#34;m&#34;&gt;1854&lt;/span&gt;             sender
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line hl&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;  5&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;   0.00-10.04  sec  9.17 GBytes  7.84 Gbits/sec                  receiver
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;CPU Utilization: local/sender 14.6% &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;0.2%u/14.4%s&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, remote/receiver 26.6% &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;1.4%u/25.3%s&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;snd_tcp_congestion cubic
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;rcv_tcp_congestion cubic
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Interesting! More than a 3x improvement in throughput. This suggests that per-packet overhead is quite high. Let’s grab some Linux perf data to confirm.&lt;/p&gt;
&lt;h3 id=&#34;linux-perf-and-flame-graphs&#34;&gt;Linux perf and flame graphs&lt;/h3&gt;
&lt;p&gt;We can analyze performance using &lt;a href=&#34;https://perf.wiki.kernel.org/index.php/Main_Page&#34;&gt;Linux perf&lt;/a&gt; to better understand where CPU time is spent. &lt;a href=&#34;https://www.brendangregg.com/flamegraphs.html&#34;&gt;Flame graphs&lt;/a&gt; can be rendered from the perf data, and they help us visualize the stack traces. The wider the function, the more expensive it (and/or its children) are. The flame graphs below are &lt;a href=&#34;https://github.com/spiermar/d3-flame-graph&#34;&gt;interactive&lt;/a&gt;. You can click to zoom and hover to see percentages. The first flame graph is from the sender:&lt;/p&gt;
&lt;figure
  class=&#34;image-wide&#34;
  data-flamegraph
  data-flamegraph-json=&#34;sender.json&#34;
  data-flamegraph-title=&#34;Sender&#34;
  
  
&gt;&lt;/figure&gt;

&lt;p&gt;A large portion of CPU time (unrelated to crypto) on the sender is spent in:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sendmsg()&lt;/code&gt; on the UDP socket&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;write()&lt;/code&gt; towards the TUN driver&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;read()&lt;/code&gt; from the TUN driver&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now, for the receiver:&lt;/p&gt;
&lt;figure
  class=&#34;image-wide&#34;
  data-flamegraph
  data-flamegraph-json=&#34;receiver.json&#34;
  data-flamegraph-title=&#34;Receiver&#34;
  
  
    data-flamegraph-min-frame-size=&#34;12&#34;
  
&gt;&lt;/figure&gt;

&lt;p&gt;A large portion of CPU time (unrelated to crypto) on the receiver is spent in:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;write()&lt;/code&gt; towards the TUN driver&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;recvmsg()&lt;/code&gt; on the UDP socket&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sendmsg()&lt;/code&gt; on the UDP socket&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This confirms that per-packet overhead is high. By increasing the MTU of the TUN interface, we reduced the frequency of the system calls for I/O on the TUN and UDP socket. Since those dominate these profiles, it makes sense that throughput would increase as a result. So how do we reduce the frequency of these system calls while still maintaining an MTU that will work across the general internet?&lt;/p&gt;
&lt;h3 id=&#34;tcp-segmentation&#34;&gt;TCP Segmentation&lt;/h3&gt;
&lt;!-- vale tailscale.em-dash = NO --&gt;
&lt;p&gt;TCP enables transmission of an arbitrary stream of bytes between two sockets. A userspace application interacts with a TCP socket using &lt;code&gt;write()&lt;/code&gt;- and &lt;code&gt;read()&lt;/code&gt;-like kernel interfaces once it is in a connected state. The application may &lt;code&gt;write()&lt;/code&gt; 2 bytes, followed later by a 2,000 byte &lt;code&gt;write()&lt;/code&gt;. The applications on either end do not need to be involved in the retransmission, ordering, or framing of messages between them. These are all handled by the TCP implementation on the kernel side of the system calls.&lt;/p&gt;
&lt;!-- vale tailscale.em-dash = YES --&gt;
&lt;p&gt;While the application writes arbitrary-sized data per system call, the TCP implementation must segment the data before it gets sent over the network. There is a finite limit to the size of a TCP segment, called the maximum segment size (MSS). MSS is advertised during the TCP three-way handshake. The lowest value wins, and neither side will transmit a segment exceeding it. MSS is typically derived from the maximum transmission unit (MTU) of the egress network interface. The MTU represents the maximum size of a single packet at the network layer. MSS describes the segment size limit at a higher layer protocol (TCP) than MTU (typically IP), and should always be less than it as a result.&lt;/p&gt;

    
    

&lt;figure class=&#34;image-wide&#34;&gt;
        &lt;img src=&#34;https://tailscale.com/blog/throughput-improvements/mtu-limited.svg&#34; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;There are consequences when a packet exceeds the MTU of a network path. The network device enforcing the limit may choose to fragment the packet into multiple smaller packets, or just drop the oversized packet. Both of these outcomes have negative impacts on performance. There are also mechanisms for signaling to the endpoints that their frames are too large, which we will not go into here. In summary, there is a finite packet size for packet-switched networks, and TCP implementations try to respect it.&lt;/p&gt;
&lt;p&gt;Knowing that TCP is responsible for segmenting the data, we can picture the journey of packets through the host to look roughly something like this:&lt;/p&gt;

    
    

&lt;figure class=&#34;image-wide&#34;&gt;
        &lt;img src=&#34;https://tailscale.com/blog/throughput-improvements/data-transmission.svg&#34; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;There is a nonzero cost for each of these layers to handle an individual TCP segment. If we can reduce the number of traversals through this stack, we can win back a lot of CPU time and pipeline latency. Enter TCP segmentation offload (TSO).&lt;/p&gt;
&lt;h3 id=&#34;tcp-segmentation-offload-tso&#34;&gt;TCP Segmentation Offload (TSO)&lt;/h3&gt;
&lt;p&gt;TSO is an offloading technique where the final fit-within-MSS segmentation is performed by the network interface device. This enables up to 64KB sized segments to traverse the stack, while still fitting within MSS before entering the network. &lt;a href=&#34;https://lwn.net/Articles/883713/&#34;&gt;Recent work in the Linux kernel&lt;/a&gt; extends the 64KB limit to 256KB. TSO requires extra metadata to be passed along with the oversized segment describing the size to segment to, along with where to find the TCP checksum field. The TCP checksum must be recomputed post-segmentation as the payload is shortened, and various TCP header fields will differ between segments.&lt;/p&gt;

    
    

&lt;figure class=&#34;image-wide&#34;&gt;
        &lt;img src=&#34;https://tailscale.com/blog/throughput-improvements/data-transmission-tso.svg&#34; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;With a typical MTU of 1500 bytes and IPv4 TCP MSS of 1460 bytes, TSO could be used to reduce stack traversals by up to 44x.&lt;/p&gt;
&lt;p&gt;Note: Modern Linux makes use of generic segmentation offload (GSO). This enables the networking stack to postpone segmentation as late as possible, even if the driver and device do not support TSO.&lt;/p&gt;
&lt;p&gt;But, what about the other direction?&lt;/p&gt;
&lt;p&gt;Generic receive offload (GRO) is the inverse of TSO. The network interface device coalesces packets together that belong to the same TCP stream, following a set of rules to prevent breaking the TCP implementation.&lt;/p&gt;

    
    

&lt;figure class=&#34;image-wide&#34;&gt;
        &lt;img src=&#34;https://tailscale.com/blog/throughput-improvements/data-receive-gro.svg&#34; /&gt;
    
&lt;/figure&gt;

&lt;h3 id=&#34;discovery-of-tso-and-gro-in-the-tun-driver&#34;&gt;(Discovery of) TSO and GRO in the TUN driver&lt;/h3&gt;
&lt;p&gt;The Linux kernel contains a &lt;a href=&#34;https://docs.kernel.org/networking/tuntap.html&#34;&gt;network device driver referred to as TUN/TAP&lt;/a&gt;. This driver is used in wireguard-go in order to present the application as a network device to the kernel. That is, a packet sent out of the TUN interface is received by the userspace application, and the userspace application can inject packets back toward the kernel by writing in the other direction (received by the TUN interface).&lt;/p&gt;
&lt;p&gt;When we set out to improve performance, we started by reading the TUN driver code. We had initially hoped to use a multi-message API via a &lt;a href=&#34;https://github.com/torvalds/linux/blob/f443e374ae131c168a065ea1748feac6b2e76613/drivers/net/tun.c#L3666&#34;&gt;packet socket&lt;/a&gt;, but unfortunately the kernel does not expose this to userspace. Instead, we started to explore the &lt;a href=&#34;https://github.com/torvalds/linux/blob/f443e374ae131c168a065ea1748feac6b2e76613/drivers/net/tun.c#L2803&#34;&gt;set_offload() function&lt;/a&gt;. This function is responsible for controlling the offloads supported by the TUN device, and we could enable TSO/GRO through it via &lt;code&gt;ioctl()&lt;/code&gt;. This functionality has been in the &lt;a href=&#34;https://github.com/torvalds/linux/commit/f43798c27684ab925adde7d8acc34c78c6e50df8&#34;&gt;Linux kernel since v2.6.27&lt;/a&gt; (2008), but seems to have gone largely unnoticed outside of the kernel-side virtio framework uses that it was originally added for.&lt;/p&gt;
&lt;p&gt;With TSO/GRO enabled on the TUN, the application acting as the TUN device becomes responsible for implementing the offload techniques (segmentation and coalescing). Once we’ve segmented, where do we transmit the smaller segments? What represents the “network” sitting on the other side of wireguard-go and tailscaled? The answer is “it depends” in the Tailscale client, but typically it’s a UDP socket. After receiving packets from the TUN device, wireguard-go handles encryption prior to transmission out of said UDP socket. The same is true in reverse: We receive packets from a UDP socket, they are decrypted, and then written back toward the TUN.&lt;/p&gt;
&lt;h3 id=&#34;sendmmsg-and-recvmmsg&#34;&gt;&lt;code&gt;sendmmsg()&lt;/code&gt; and &lt;code&gt;recvmmsg()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;sendmmsg()&lt;/code&gt; and &lt;code&gt;recvmmsg()&lt;/code&gt; system calls enable the transmission and reception of multiple messages in a single system call. With a vector of packets now available from reads at the TUN driver, we can leverage &lt;code&gt;sendmmsg()&lt;/code&gt; when transmitting out of the UDP socket. The inverse direction starts with &lt;code&gt;recvmmsg()&lt;/code&gt; at the UDP socket, potentially returning multiple packets, which are candidates for coalescing just before writing to the TUN driver. Putting this together with TSO and GRO, we are able to reduce I/O system calls on both ends of the pipeline.&lt;/p&gt;

    
    

&lt;figure class=&#34;image-wide&#34;&gt;
        &lt;img src=&#34;https://tailscale.com/blog/throughput-improvements/improved-throughput.svg&#34; /&gt;
    
&lt;/figure&gt;

&lt;h2 id=&#34;results&#34;&gt;Results&lt;/h2&gt;
&lt;p&gt;And now for the results!&lt;/p&gt;
&lt;p&gt;Applying TCP segmentation offload, generic receive offload, and the mmsg() system calls resulted in significant throughput performance improvements in wireguard-go, and so also in the Tailscale client. Using the same tests we conducted previously, we delivered a best case 2.2x improvement to wireguard-go. And, we improved the throughput of Tailscale on Linux by up to 33%. We intend to continue working on improving the performance of Tailscale in all areas, including throughput, as well as across more platforms.&lt;/p&gt;
&lt;p&gt;wireguard-go with TSO, GRO, and mmsg():&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ubuntu@thru6:~$ iperf3 -i &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; -c thru7-wg -t &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt; -C cubic -V
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;iperf 3.9
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Linux thru6 5.15.0-1026-aws &lt;span class=&#34;c1&#34;&gt;#30-Ubuntu SMP Wed Nov 23 14:15:21 UTC 2022 x86_64&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Control connection MSS &lt;span class=&#34;m&#34;&gt;1368&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Time: Thu, &lt;span class=&#34;m&#34;&gt;08&lt;/span&gt; Dec &lt;span class=&#34;m&#34;&gt;2022&lt;/span&gt; 19:39:43 GMT
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Connecting to host thru7-wg, port &lt;span class=&#34;m&#34;&gt;5201&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      Cookie: y4x75uvr2uupa3urdguks6m5ovn2ucdrjxrs
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line hl&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      TCP MSS: &lt;span class=&#34;m&#34;&gt;1368&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;default&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;  5&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;local&lt;/span&gt; 10.9.9.6 port &lt;span class=&#34;m&#34;&gt;58314&lt;/span&gt; connected to 10.9.9.7 port &lt;span class=&#34;m&#34;&gt;5201&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Starting Test: protocol: TCP, &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; streams, &lt;span class=&#34;m&#34;&gt;131072&lt;/span&gt; byte blocks, omitting &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; seconds, &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt; second test, tos &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; ID&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Interval           Transfer     Bitrate         Retr  Cwnd
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;  5&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;   0.00-10.00  sec  6.24 GBytes  5.36 Gbits/sec    &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;   3.02 MBytes
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- - - - - - - - - - - - - - - - - - - - - - - - -
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line hl&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Test Complete. Summary Results:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line hl&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; ID&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Interval           Transfer     Bitrate         Retr
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line hl&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;  5&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;   0.00-10.00  sec  6.24 GBytes  5.36 Gbits/sec    &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;             sender
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line hl&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;  5&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;   0.00-10.04  sec  6.24 GBytes  5.33 Gbits/sec                  receiver
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;CPU Utilization: local/sender 9.1% &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;0.1%u/9.0%s&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, remote/receiver 0.5% &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;0.0%u/0.5%s&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;snd_tcp_congestion cubic
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;rcv_tcp_congestion cubic
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    
    

&lt;figure class=&#34;image-wide&#34;&gt;
        &lt;img src=&#34;https://tailscale.com/blog/throughput-improvements/results.svg&#34; alt=&#34;Single TCP stream iperf3 test, OS: Ubuntu 22.04, Instance Type: c6i.8xlarge, Kernel: 5.15.0-1026-aws&#34; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;Surprisingly, we improved the performance of wireguard-go (running in userspace) enough to make it faster than WireGuard (running in the kernel) in the best conditions. But, this point of comparison likely won’t be long-lived: we expect the kernel can do similar things.&lt;/p&gt;
&lt;h2 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;In our journey to overcome our biggest overhead in packet processing, we came very close to wanting a new or different kernel interface. We gladly found that one was already available in the Linux kernel — and one that has been around long enough for us to use everywhere. Performance can always become somewhat of an arms race, but our results here demonstrate that we can keep up with our kernel counterparts provided that we are using the right kind of kernel interface – userspace isn’t slow, some kernel interfaces are!&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href=&#34;https://github.com/sailorfrag&#34;&gt;Adrian Dewhurst&lt;/a&gt; for his detailed review and thanks to &lt;a href=&#34;https://www.zx2c4.com/&#34;&gt;Jason A. Donenfeld&lt;/a&gt; for his ongoing review of our patches. Thanks to our designers &lt;a href=&#34;https://dannypagano.com/&#34;&gt;Danny Pagano&lt;/a&gt; for the illustrations, and &lt;a href=&#34;https://rosszurowski.com&#34;&gt;Ross Zurowski&lt;/a&gt; for incorporating d3-flame-graph.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;To learn more, watch &lt;a href=&#34;https://www.youtube.com/watch?v=wCqXYPQFNuE&#34;&gt;our discussion with Jordan Whited and James Tucker&lt;/a&gt; on improving Tailscale&amp;rsquo;s throughput.&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Quickly switch between Tailscale accounts</title>
      
      
      <link>https://tailscale.com/blog/fast-user-switching/</link>
      <pubDate>Mon, 05 Dec 2022 00:00:00 +0000</pubDate>
      <author>Maisem Ali, Mihai Parparita, Alessandro Mingione</author>
      <guid>https://tailscale.com/blog/fast-user-switching/</guid>
      <description>&lt;p&gt;Fast user switching has come to Tailscale! Starting in v1.34, out today, you’ll be able to quickly switch between Tailscale accounts on the same device, without re-authenticating. (&lt;a href=&#34;https://github.com/tailscale/tailscale/issues/713&#34;&gt;We heard you&lt;/a&gt;.)&lt;/p&gt;

    
    

&lt;figure class=&#34;image-wide&#34;&gt;
        &lt;img src=&#34;https://tailscale.com/blog/fast-user-switching/fus-demo.gif&#34; alt=&#34;a gif showing the process of switching user accounts in the macOS client&#34; /&gt;
    
    &lt;figcaption&gt;
        &lt;p&gt;To switch between tailnets on macOS, click on the Tailscale icon in the menu bar and select the other account.&lt;/p&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;When using Tailscale both at work and at home, it used to be cumbersome to switch between accounts to do things like switch to your home account to access that one photo of your trip to Rome that’s stored on your NAS, and then switch back to your work account to share it with your colleagues (and make them jealous).&lt;/p&gt;
&lt;p&gt;Now, you can switch to a different account (say, Alice on the &lt;code&gt;example.com&lt;/code&gt; tailnet), just by typing in the terminal:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;tailscale switch alice@example.com
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You’ll connect in seconds.&lt;/p&gt;
&lt;p&gt;You can also set nicknames either during login:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;tailscale login --nickname=work
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Or after logging in:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;tailscale set --nickname=work
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and use them to switch accounts even more easily:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;tailscale switch work
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;With fast user switching, each identity is completely separate on the device. It’s equivalent to your device dropping packets in one tailnet, and allowing packets in another. You’re not transmitting packets to multiple tailnets &lt;em&gt;simultaneously&lt;/em&gt;. And, separate tailnets don’t learn anything about each other (such as that the device is also part of another tailnet — or that another tailnet even exists).&lt;/p&gt;
&lt;p&gt;Fast user switching means you don’t need to re-authenticate every time you change accounts — but you’ll still need to re-authenticate the connection if the device’s &lt;a href=&#34;https://tailscale.com/kb/1028/key-expiry/&#34;&gt;node key is expired&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Fast user switching is in alpha, and available in Tailscale v1.34 on Linux (CLI), macOS (CLI and UI), and Windows (CLI and UI). Support for other platforms will be coming later.&lt;/p&gt;
&lt;p&gt;To learn more about using fast user switching, &lt;a href=&#34;https://tailscale.com/kb/1225/fast-user-switching&#34;&gt;read the documentation&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>November Tailscale newsletter</title>
      
      
      <link>https://tailscale.com/blog/2022-11-newsletter/</link>
      <pubDate>Wed, 30 Nov 2022 00:00:00 +0000</pubDate>
      <author>Mark Ogilbee</author>
      <guid>https://tailscale.com/blog/2022-11-newsletter/</guid>
      <description>This is a re-publishing of our monthly newsletter sent to subscribers earlier this month. &lt;a href=&#34;https://gavzih9v2tc.typeform.com/to/NaDeoA4y&#34;&gt;Sign up to receive future email newsletters&lt;/a&gt;.&lt;hr/&gt;&lt;p&gt;👉 We’d love to hear what you think about Tailscale, and filling out this &lt;a href=&#34;https://docs.google.com/forms/d/e/1FAIpQLSdUzQfTOTaurTbviJO4_vbipN8JpbZr7_OLkxqlODZXnkF_tQ/viewform&#34;&gt;Google form&lt;/a&gt; helps us build a better product for you!&lt;/p&gt;
&lt;p&gt;🛎️ Tailscale has recently been notified of security vulnerabilities in the Tailscale Windows client. If you are running Tailscale on Windows, &lt;a href=&#34;https://tailscale.com/blog/windows-security-vulnerabilities&#34;&gt;upgrade&lt;/a&gt; to Tailscale v1.32.3 or later, or v1.33.257 or later (unstable), to remediate the issue.&lt;/p&gt;
&lt;p&gt;🚀 It’s been a dramatic month across the tech industry, but we have some good news: Tailscale is hiring! We’re looking for driven individuals who think differently, enjoy collaborating with highly technical remote teams, and are comfortable working asynchronously. See our open roles below, and learn more about &lt;a href=&#34;https://tailscale.com/company&#34;&gt;our company vision&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boards.greenhouse.io/tailscale/jobs/4093171005&#34;&gt;Developer Advocate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boards.greenhouse.io/tailscale/jobs/4041710005&#34;&gt;Software Engineer: Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boards.greenhouse.io/tailscale/jobs/4131985005&#34;&gt;Technical Writer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boards.greenhouse.io/tailscale/jobs/4053245005&#34;&gt;Product Manager&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boards.greenhouse.io/tailscale/jobs/4051721005&#34;&gt;Senior Product Designer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boards.greenhouse.io/tailscale/jobs/4038875005&#34;&gt;Recruiter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Despite gearing up for eating turkey (for those of us in the U.S., anyway), we’ve had a lively November at Tailscale. We launched &lt;a href=&#34;https://tailscale.com/kb/1223/tailscale-funnel/&#34;&gt;Tailscale Funnel&lt;/a&gt;, which makes it simple (and still secure) to route traffic from the internet to a node in your tailnet. We’ve developed a guide for using tsnet to make your internal services easier to run, access, and secure; and we put together an inside look at how we built our new &lt;a href=&#34;https://tailscale.com/blog/webhooks/&#34;&gt;webhooks&lt;/a&gt; feature. Plus: Tailscale has joined the Fediverse! You can now &lt;a href=&#34;https://hachyderm.io/@tailscale&#34;&gt;follow us on Hachyderm&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We’ve got lots of community contributions and new Tailscale features to share. Let’s jump in:&lt;/p&gt;
&lt;h3 id=&#34;from-the-community&#34;&gt;From the community&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://major.io/2022/10/27/build-a-tailscale-exit-node-with-firewalld/&#34;&gt;&lt;strong&gt;Build a Tailscale exit node with firewalld&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
Major.io covers how to create an exit node for your Tailscale network using firewalld Fedora, CentOS Stream, and Red Hat Enterprise Linux (RHEL).&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://schmatzler.dev/articles/private-kubernetes-ingress-with-tailscale&#34;&gt;&lt;strong&gt;Private Kubernetes ingress with Contour and Tailscale&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
Twitter user &lt;a href=&#34;https://twitter.com/cschmatzler&#34;&gt;@cschmatzler&lt;/a&gt; declares: &amp;ldquo;The star of the show here is Tailscale.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=EazHhUHZZms&#34;&gt;&lt;strong&gt;The Download: Featuring Tailscale’s WASM SSH client&lt;/strong&gt;&lt;/a&gt; [video]&lt;br&gt;
&lt;a href=&#34;https://twitter.com/film_girl&#34;&gt;Christina Warren&lt;/a&gt; explains on GitHub’s YouTube channel that “Tailscale makes it really easy to SSH into your various devices from anywhere in the world” without “getting stuck in a black hole of networking and DNS errors.”&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.pulumi.com/resources/building-virtual-networks-with-pulumi-and-tailscale/&#34;&gt;&lt;strong&gt;Building virtual networks with Pulumi and Tailscale&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
Register for a one-hour Pulumi workshop that will demonstrate how to securely connect end-user devices and cloud resources using modern infrastructure as code written in real programming languages.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://a.wholelottanothing.org/2022/11/07/how-to-create-your-own-vpn-with-tailscale-to-get-around-stupid-free-wifi-network-rules-and-protect-your-traffic&#34;&gt;&lt;strong&gt;How to create your own VPN with Tailscale&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://mastodon.cloud/@mathowie&#34;&gt;Matt Haughey&lt;/a&gt; at A Whole Lotta Nothing shares how to create your own VPN with Tailscale “to get around stupid free WiFi network rules and protect your traffic.”&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/clojure-quant/infra-guix/blob/main/DOC/SETUP/tailscale-with-guix.md&#34;&gt;&lt;strong&gt;Tailscale on a Linux Guix machine&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
GitHub user &lt;a href=&#34;https://github.com/awb99&#34;&gt;awb99&lt;/a&gt; created a custom &lt;a href=&#34;https://github.com/clojure-quant/infra-guix/blob/main/modules/awb99/package/tailscale.scm&#34;&gt;Guix Tailwind package&lt;/a&gt; and a &lt;a href=&#34;https://github.com/clojure-quant/infra-guix/blob/main/modules/awb99/services/tailscale.scm&#34;&gt;custom Tailwind service&lt;/a&gt; for getting Tailscale to work on Guix.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/jsiebens/tskeyservice&#34;&gt;&lt;strong&gt;Exchanging OIDC tokens for Tailscale auth keys&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
Twitter user &lt;a href=&#34;https://twitter.com/nosceon&#34;&gt;Johan Siebens&lt;/a&gt; shares a “&lt;a href=&#34;https://twitter.com/nosceon/status/1590976987468034048&#34;&gt;Friday morning hack&lt;/a&gt;: a little service exchanging OIDC tokens for short-lived, one-time use Tailscale auth keys.&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://tavianator.com/2022/remote_reboots.html&#34;&gt;&lt;strong&gt;Remote reboots with encrypted disks&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
Blogger &lt;a href=&#34;https://twitter.com/tavianator&#34;&gt;Tavian Barnes&lt;/a&gt; explains how Tailscale helps him remotely reboot his computer with full disk encryption.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.heavybit.com/library/podcasts/the-kubelist-podcast/ep-33-tailscale-with-avery-pennarun&#34;&gt;&lt;strong&gt;The Kubelist Podcast, ep. 33: Tailscale with Avery Pennarun&lt;/strong&gt;&lt;/a&gt; [audio]&lt;br&gt;
Hosts Marc Campbell and Benjie De Groot chat with &lt;a href=&#34;https://twitter.com/apenwarr&#34;&gt;Avery Pennarun&lt;/a&gt; about VPNs, mesh-overlay networks, the relationship between scaling and architecture, and lots more.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/davidsbond/vault-plugin-tailscale&#34;&gt;&lt;strong&gt;A HashiCorp Vault plugin for managing Tailscale authentication keys&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
GitHub user &lt;a href=&#34;https://github.com/davidsbond&#34;&gt;David Bond&lt;/a&gt; offers a HashiCorp Vault plugin for generating device authentication keys for Tailscale.&lt;/p&gt;
&lt;h3 id=&#34;from-the-team&#34;&gt;From the team&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://tailscale.com/blog/introducing-tailscale-funnel/&#34;&gt;&lt;strong&gt;Introducing Tailscale Funnel&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
With &lt;a href=&#34;https://tailscale.com/kb/1223/tailscale-funnel/&#34;&gt;Tailscale Funnel&lt;/a&gt;, you can publicly share things from a node in your tailnet for anyone to access, even if they don’t have Tailscale.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://tailscale.com/blog/2022-11-16-fediverse&#34;&gt;&lt;strong&gt;Tailscale on the Fediverse&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
We want to make it easier for you to keep in touch with us, so we’ve created a &lt;a href=&#34;https://hachyderm.io/@tailscale&#34;&gt;Fediverse account&lt;/a&gt; on &lt;a href=&#34;https://hachyderm.io/explore&#34;&gt;Hachyderm&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://tailscale.com/blog/tsnet-virtual-private-services&#34;&gt;&lt;strong&gt;Virtual private services with tsnet&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
Tailscale’s &lt;a href=&#34;https://twitter.com/theprincessxena&#34;&gt;Xe Iaso&lt;/a&gt; covers how to use tsnet to get all of the goodness of Tailscale in userspace so that you can have your services join your tailnet like they were separate computers.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://tailscale.com/blog/webhooks-design&#34;&gt;&lt;strong&gt;Making your Tailscale experience a little more eventful with webhooks&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
Laura Florea offers an insider’s look into how Tailscale developed one of our most requested features: webhooks.&lt;/p&gt;
&lt;h3 id=&#34;tailscale-in-real-life&#34;&gt;Tailscale in real life&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://tailscale.com/blog/trainscale/&#34;&gt;&lt;strong&gt;Tailscale Runs Anywhere I Need (TRAIN)&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://twitter.com/katiereese317&#34;&gt;Katie Reese&lt;/a&gt; explains how 11 Tailscalars boarded a train from San Francisco to Seattle to prove that &lt;a href=&#34;https://twitter.com/Tailscale/status/1592959142276128769&#34;&gt;Tailscale really can run anywhere&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;tailscale-learning-library&#34;&gt;Tailscale learning library&lt;/h3&gt;
&lt;p&gt;We are building a learning library to help folks at any stage in their career. If you have a topic you’d like to see covered, send us a tweet &lt;a href=&#34;https://twitter.com/Tailscale&#34;&gt;@Tailscale&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://tailscale.com/learn/understanding-mesh-vpns/&#34;&gt;&lt;strong&gt;Understanding mesh VPNs&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
Mesh VPNs use a peer-to-peer architecture to offer greater resiliency, scalability, and performance than conventional VPNs. This article outlines the features, benefits, and use cases of mesh VPNs.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://tailscale.com/learn/remote-worker-vpn/&#34;&gt;&lt;strong&gt;Why remote workers should use a VPN&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
As the popularity of remote work has skyrocketed, so have malicious attacks attempting to gain access to companies’ infrastructure and assets. Explore how using a virtual private network can help remote workers keep their company network secure.&lt;/p&gt;
&lt;p&gt;That’s all for now. Stay well!&lt;/p&gt;
&lt;p&gt;🔈P.S. Leaving a review on G2 helps more teams find Tailscale. We’d really appreciate it if &lt;a href=&#34;https://www.g2.com/products/tailscale/reviews/start?return_to=https%3A%2F%2Fwww.g2.com%2Fproducts%2Ftailscale%2Ftake_survey&#34;&gt;you took the time to put in a good word&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Private go links for your tailnet</title>
      
      
      <link>https://tailscale.com/blog/golink/</link>
      <pubDate>Wed, 30 Nov 2022 00:00:00 +0000</pubDate>
        <author>Will Norris</author>
      <guid>https://tailscale.com/blog/golink/</guid>
      <description>&lt;p&gt;Today, we&amp;rsquo;re sharing &lt;a href=&#34;https://github.com/tailscale/golink&#34;&gt;golink&lt;/a&gt;, an open source private URL shortener service for &lt;a href=&#34;https://tailscale.com/kb/1136/tailnet/&#34;&gt;tailnets&lt;/a&gt;.
Using golink, you can create and share simple &lt;em&gt;go/name&lt;/em&gt; links for commonly accessed websites, so that anyone in your network can access them no matter the device they’re on — without requiring browser extensions or fiddling with DNS settings.
And because golink integrates with Tailscale, links are private to users in your tailnet without any separate user management, logins, or security policies.&lt;/p&gt;

    
    

&lt;figure class=&#34;image-wide&#34;&gt;
        &lt;img src=&#34;https://tailscale.com/blog/golink/screenshot.jpg&#34; alt=&#34;A screenshot of the golink application homepage. A form allows a new link to be created and popular links are listed: go/meet, go/slack, go/search, go/email&#34; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;The first go link service was an internal tool built at Google around 2006, and was eventually copied by dozens of other tech companies (as good ideas have a tendency to be).
These go link services are a convenient way to provide memorable links to commonly used resources like design docs (&lt;em&gt;go/foo-design&lt;/em&gt;), monitoring dashboards (&lt;em&gt;go/mon&lt;/em&gt;), or the menu at your favorite lunch spot (&lt;em&gt;go/lunch&lt;/em&gt;).
Rather than bookmarking or trying to remember the URL, you can just type &lt;em&gt;go/lunch&lt;/em&gt; in your browser and it takes you right to the page.
Because the data model is so simple (just a key-value store in the simplest form),
it&amp;rsquo;s a popular type of service to build as a weekend project, right up there with &lt;a href=&#34;https://todomvc.com/&#34;&gt;to-do lists&lt;/a&gt; and &lt;a href=&#34;https://github.com/topics/hacker-news&#34;&gt;Hacker News clients&lt;/a&gt;.
There are thousands of open source &lt;a href=&#34;https://github.com/topics/url-shortener&#34;&gt;URL shorteners&lt;/a&gt;, and even multiple startups providing go links as a service.
So why did we bother building a new one?&lt;/p&gt;
&lt;h2 id=&#34;go-links-meet-tailscale&#34;&gt;go links, meet Tailscale&lt;/h2&gt;
&lt;p&gt;Tailscale&amp;rsquo;s golink service started in the first few hours of my first day of work.
&lt;a href=&#34;http://github.com/bradfitz&#34;&gt;Brad&lt;/a&gt; had just built a simple internal company directory called &amp;ldquo;who&amp;rdquo; (inspired by another Google tool), and I immediately asked where &amp;ldquo;go&amp;rdquo; was.
Within the hour, Brad had the &lt;a href=&#34;https://github.com/tailscale/golink/commit/3cb4c6cb&#34;&gt;first version of golink&lt;/a&gt; that stored link metadata in simple &lt;a href=&#34;https://tailscale.com/blog/an-unlikely-database-migration/&#34;&gt;JSON files on disk&lt;/a&gt; running locally and serving links for the company.
Even though I had been using Tailscale at home for months, as I started using and working on golink,
a few unique things about building services on top of Tailscale &lt;a href=&#34;https://web.archive.org/web/20220604002735/https://twitter.com/willnorris/status/1532881581475368960&#34;&gt;became more apparent&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Applications can really run anywhere.
golink ran on a developer laptop for two days before moving to a production environment, and no one could tell the difference.
Even the transition to production was as trivial as &lt;a href=&#34;https://tailscale.com/kb/1098/machine-names/#renaming-a-machine&#34;&gt;renaming&lt;/a&gt; two nodes.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tailscale.com/blog/tsnet-virtual-private-services/&#34;&gt;tsnet&lt;/a&gt; allows an application to join your tailnet directly, which simplifies deployment.
golink is a single static go binary that can run practically anywhere.
It doesn&amp;rsquo;t require a Tailscale client to be installed and doesn&amp;rsquo;t require root access, since tsnet manages its own Tailscale connection.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tailscale.com/kb/1081/magicdns/&#34;&gt;MagicDNS&lt;/a&gt; makes it possible to host golink at the short URL &lt;em&gt;http://go/&lt;/em&gt; without needing any browser extensions or DNS hacks to resolve the host name.
It just works, even on mobile devices.&lt;/li&gt;
&lt;li&gt;Because Tailscale authenticates all peer connections, users are automatically authenticated without needing to do anything.
There is no separate identity provider, no protocols to implement, and no user database.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By running golink on your tailnet, Tailscale doesn’t see the links you create or the content of the links.
Your DNS queries pass through your device’s local Tailscale DNS proxy, but they are not logged.&lt;/p&gt;
&lt;h2 id=&#34;just-enough-features&#34;&gt;Just enough features&lt;/h2&gt;
&lt;p&gt;After completing the initial prototype, we migrated the JSON files to sqlite (&lt;a href=&#34;https://tailscale.com/blog/database-for-2022/&#34;&gt;as we do&lt;/a&gt;)
and set out to add just enough additional features to make golink useful but not too heavy.
I drew some inspiration from the go link service at Twitter, adding support for getting link metadata by appending a &amp;ldquo;+&amp;rdquo; to a URL:
&lt;em&gt;go/name&lt;/em&gt; will resolve the link, but &lt;em&gt;go/name+&lt;/em&gt; just serves information about the link without resolving it.
We made links case insensitive and ignored dashes, eliminating a common problem in some implementations where &lt;em&gt;go/enghandbook&lt;/em&gt; and &lt;em&gt;go/eng-handbook&lt;/em&gt; might resolve to different destinations.
We kept a simple ownership model where links can only be updated by their owner, ownership can be transferred simply by editing the link, and orphaned links can be taken over by anyone on the tailnet.
We track basic stats so that the golink homepage can list popular links to help with discovery.&lt;/p&gt;
&lt;p&gt;But my favorite feature by far is templated links.
It&amp;rsquo;s pretty common for go links to have any remaining path segments after the link be appended to the destination.
So, for example, if &lt;em&gt;go/who&lt;/em&gt; redirects to &lt;em&gt;http://who/&lt;/em&gt;, then &lt;em&gt;go/who/amelie&lt;/em&gt; would go to &lt;em&gt;http://who/amelie&lt;/em&gt;.
But what if you don&amp;rsquo;t simply want to append the remaining path, and instead include it in a query parameter?
golink solves this by using &lt;a href=&#34;https://pkg.go.dev/text/template&#34;&gt;go templates&lt;/a&gt; for all destinations links.
We provide a simple data object containing the remaining path data, as well as some basic functions for escaping values.
Seeing templates inside of URLs looks a little unusual at first, but you can quickly see how incredibly powerful it is.&lt;/p&gt;
&lt;p&gt;Here are some of my favorite go links that we use at Tailscale, and the destination link templates:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;go/prs&lt;/strong&gt;: Without a path, this list &lt;a href=&#34;https://github.com/pulls?q=is:open+is:pr+review-requested:@me+archived:false+org:tailscale&#34;&gt;GitHub pull requests in the Tailscale organization that are awaiting my review&lt;/a&gt;.
With a path (like &lt;em&gt;go/prs/bradfitz&lt;/em&gt;), it shows pull requests awaiting review by the specified GitHub user.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;https://github.com/pulls?q=is:open+is:pr+review-requested:{{with .Path}}{{QueryEscape .}}{{else}}@me{{end}}+archived:false+org:tailscale
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;go/cs&lt;/strong&gt;: This uses the path to perform a code search for the specified term in all GitHub repositories in the Tailscale organization.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;https://github.com/search?type=code&amp;amp;q=org:tailscale{{with .Path}}+{{QueryEscape .}}{{end}}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;go/code&lt;/strong&gt;: Given a code path, such as &lt;em&gt;go/code/cmd/tailscale&lt;/em&gt;, this link opens that path in the main Tailscale GitHub repository.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;https://github.com/tailscale/tailscale{{with .Path}}/tree/main/{{PathEscape .}}{{end}}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;go/meet&lt;/strong&gt;: With an extra path, this creates impromptu Google Meet meetings like &lt;em&gt;go/meet/breakroom&lt;/em&gt;. (This is actually our most used link at Tailscale by a 2-to-1 margin!)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;https://meet.google.com/lookup/
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;go/cal&lt;/strong&gt; or &lt;strong&gt;go/c&lt;/strong&gt;: Without a path, this opens Google Calendar. With a path, it opens a given Tailscalar&amp;rsquo;s calendar.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;https://calendar.google.com/{{with .Path}}calendar/embed?mode=week&amp;amp;src={{.}}@tailscale.com{{end}}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;go/slack&lt;/strong&gt;: Without a path, this opens Tailscale&amp;rsquo;s Slack. With a path, it opens a specific Slack channel.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;https://tailscale.slack.com/{{with .Path}}channels/{{PathEscape .}}{{end}}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;go/wwwpr&lt;/strong&gt;: Given a pull request number for the tailscale.com GitHub repository, this opens the automatically provisioned staging site to preview the change.
Note that this uses the path to modify the destination hostname rather than the path or query string.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{if .Path}}https://website-preview-{{.Path}}.fly.dev{{end}}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;go/go/gadget&lt;/strong&gt;: Okay, this is really two links.
&lt;em&gt;go/go&lt;/em&gt; is a recursive link to &lt;em&gt;http://go/&lt;/em&gt;, and &lt;em&gt;go/gadget&lt;/em&gt; redirects to &lt;a href=&#34;https://www.youtube.com/watch?v=EcF2LOaLgA0&#34;&gt;https://www.youtube.com/watch?v=EcF2LOaLgA0&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We also use go links to link to monitoring dashboards, specific reports on metrics, design docs, popular blog posts or references,
our internal tools (like our support ticketing system, or our HR system), production runbooks, frequently rerun CI/CD jobs,
our product roadmap, and — of course — a long-form document on all the ways DNS is broken (&lt;em&gt;go/how-dns-works&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;golink is still &lt;a href=&#34;https://tailscale.com/kb/1167/release-stages/#experimental&#34;&gt;experimental&lt;/a&gt;, but we&amp;rsquo;ve been using it daily for the last six months and have been quite happy with it.
To start using go links on your tailnet, head to &lt;a href=&#34;https://github.com/tailscale/golink&#34;&gt;https://github.com/tailscale/golink&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Tailscale Runs Anywhere I Need</title>
      
      
      <link>https://tailscale.com/blog/trainscale/</link>
      <pubDate>Wed, 23 Nov 2022 00:00:00 +0000</pubDate>
        <author>Katie Reese</author>
      <guid>https://tailscale.com/blog/trainscale/</guid>
      <description>&lt;p&gt;Last week, Tailscale hosted a three-day co-work week to prove &lt;strong&gt;Tailscale Runs Anywhere I Need (TRAIN)&lt;/strong&gt; by traversing the Amtrak Coast Starlight line from Emeryville, CA to Seattle, WA. The week included a shared work day in Berkeley, an overnight on the train, a work day from the train’s observatory, and a work day from a lovely Airbnb in the Queen Anne neighborhood of Seattle.&lt;/p&gt;
&lt;div class=&#34;my-8&#34;&gt;
&lt;blockquote class=&#34;relative p-4 text-sm transition-colors duration-150 ease-in-out border rounded-lg cursor-pointer tweet max-w-md mx-auto bg-white mb-4&#34;&gt;
  &lt;header class=&#34;flex items-start mb-2&#34;&gt;
    &lt;div class=&#34;flex items-center&#34;&gt;
      &lt;div class=&#34;flex-shrink-0 overflow-x-hidden rounded-full w-9&#34;&gt;
        &lt;img class=&#34;w-full h-auto&#34; src=&#34;tailscale.jpeg&#34; alt /&gt;
      &lt;/div&gt;
      &lt;div class=&#34;flex-grow pl-2 leading-4&#34;&gt;
        &lt;div class=&#34;flex items-center&#34;&gt;
          &lt;div class=&#34;font-bold text-gray-900&#34;&gt;Tailscale&lt;/div&gt;
          
        &lt;/div&gt;
        &lt;div class=&#34;text-gray-600&#34;&gt;Tailscale&lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;w-5 h-5 ml-auto tweet-bird&#34;&gt;&lt;/div&gt;
  &lt;/header&gt;
  &lt;div class=&#34;tweet-content text-gray-800 leading-normal&#34;&gt;
    🚂 Eleven Tailscalars woke up on a train this morning headed from SF to Seattle to prove “Tailscale Runs Anywhere I Need.”
  &lt;/div&gt;
  &lt;a href=&#34;https://twitter.com/Tailscale/status/1592959142276128769&#34; target=&#34;_blank&#34; aria-label=&#34;Link to Tailscale&#39;s Tweet&#34; rel=&#34;nofollow noreferrer&#34; class=&#34;stretched-link&#34;&gt;&lt;/a&gt;
&lt;/blockquote&gt;

&lt;/div&gt;

&lt;p&gt;On our adventure we strengthened existing friendships and created new ones through shared laughter, good food, and of course, a healthy amount of games. We had the opportunity to celebrate the two-year anniversary of teammate Sonia Appasamy and take in beautiful vistas up the west coast — while &lt;a href=&#34;https://tailscale.com/blog/introducing-tailscale-funnel/&#34;&gt;shipping new features&lt;/a&gt; and &lt;a href=&#34;https://tailscale.com/blog/windows-security-vulnerabilities/&#34;&gt;fixing critical vulnerabilities&lt;/a&gt;. Shout out to the Amtrak train attendants that joined in on the fun and made our trip spectacular.&lt;/p&gt;
&lt;figure&gt;
  &lt;iframe class=&#34;mx-auto w-1/2&#34; style=&#34;aspect-ratio:39/70&#34; src=&#34;https://www.youtube.com/embed/JZ0tuuUEzBM&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
  &lt;figcaption&gt;Tailscalars on a train. No designers were harmed in the making of this video.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;If a remote working culture that prioritizes giving teammates opportunities to know one another and deploying Tailscale from wild places sounds of interest to you, &lt;a href=&#34;https://tailscale.com/careers/&#34;&gt;Tailscale is hiring&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;🚂 Indeed, Tailscale does run anywhere I need.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Action required: Upgrade Windows clients to v1.32.3</title>
      
      
      <link>https://tailscale.com/blog/windows-security-vulnerabilities/</link>
      <pubDate>Mon, 21 Nov 2022 00:00:00 +0000</pubDate>
        <author>Maya Kaczorowski</author>
      <guid>https://tailscale.com/blog/windows-security-vulnerabilities/</guid>
      <description>&lt;p&gt;Tailscale has recently been notified of security vulnerabilities in the Tailscale Windows client which allow a malicious website visited by a device running Tailscale to change the Tailscale daemon configuration and access information in the Tailscale local and peer APIs.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To patch these vulnerabilities, &lt;a href=&#34;https://tailscale.com/kb/1067/update/?tab=windows&#34;&gt;upgrade Tailscale on your Windows machines&lt;/a&gt; to Tailscale v1.32.3 or later&lt;/strong&gt;, or v1.33.257 or later (unstable).&lt;/p&gt;
&lt;h3 id=&#34;what-happened&#34;&gt;What happened?&lt;/h3&gt;
&lt;p&gt;In the Tailscale client, the local API was bound to a local TCP socket, and communicated with the Windows client GUI in cleartext with no Host header verification.&lt;/p&gt;
&lt;p&gt;This allowed an attacker-controlled website visited by the node to rebind DNS to an attacker-controlled DNS server, and then make local API requests in the Windows client, and peer API requests in all clients. An attacker could then change the coordination server to an attacker-controlled coordination server and access the node’s Tailscale environment variables.&lt;/p&gt;
&lt;p&gt;The peer API was also vulnerable to DNS rebinding.&lt;/p&gt;
&lt;p&gt;There is no evidence of these vulnerabilities being purposefully triggered or exploited.&lt;/p&gt;
&lt;p&gt;Further information on these vulnerabilities is available in Tailscale security bulletins &lt;a href=&#34;https://tailscale.com/security-bulletins/#ts-2022-004&#34;&gt;TS-2022-004&lt;/a&gt; and &lt;a href=&#34;https://tailscale.com/security-bulletins/#ts-2022-005&#34;&gt;TS-2022-005&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;who-is-affected&#34;&gt;Who is affected?&lt;/h3&gt;
&lt;p&gt;Tailscale clients prior to v1.32.3 are affected.&lt;/p&gt;
&lt;p&gt;Admins of a tailnet can &lt;a href=&#34;https://login.tailscale.com/admin/machines?q=version%3A%3C1.32.3+windows&#34;&gt;view affected devices in the admin console&lt;/a&gt;. We have emailed the owners of tailnets with affected Windows devices.&lt;/p&gt;
&lt;h3 id=&#34;what-do-i-need-to-do&#34;&gt;What do I need to do?&lt;/h3&gt;
&lt;p&gt;If you are running Tailscale on Windows, &lt;a href=&#34;https://tailscale.com/kb/1067/update/&#34;&gt;upgrade to v1.32.3 or later&lt;/a&gt; or v1.33.257 or later (unstable) to remediate the issue.&lt;/p&gt;
&lt;p&gt;The Windows client caches the current version for a while, so may not yet have v1.32.3 available on your device.
In that case, you can still pull the latest release from &lt;a href=&#34;http://pkgs.tailscale.com/stable&#34;&gt;http://pkgs.tailscale.com/stable&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you have any issues, please &lt;a href=&#34;https://tailscale.com/contact/support&#34;&gt;contact support&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Introducing Tailscale Funnel</title>
      
      
      <link>https://tailscale.com/blog/introducing-tailscale-funnel/</link>
      <pubDate>Thu, 17 Nov 2022 00:00:00 +0000</pubDate>
      <author>Brad Fitzpatrick, Maisem Ali, Sonia Appasamy, Anton Tolchanov, Shayne Sweeney</author>
      <guid>https://tailscale.com/blog/introducing-tailscale-funnel/</guid>
      <description>&lt;p&gt;Tailscale lets you put all your devices on their own private &lt;a href=&#34;https://tailscale.com/kb/1136/tailnet/&#34;&gt;tailnet&lt;/a&gt; so they can reach each other, &lt;a href=&#34;https://tailscale.com/kb/1018/acls/&#34;&gt;ACLs&lt;/a&gt; permitting. Usually that’s nice and comforting, knowing that all your devices can then be isolated from the internet, without any ports needing to be open to the world.&lt;/p&gt;
&lt;p&gt;Sometimes, though, you need something from the big, scary, non-Tailscale internet to be able to reach your device.&lt;/p&gt;
&lt;p&gt;Maybe you need to receive a webhook from GitHub. Maybe you want to briefly test a website you’re working on using a coworker’s phone. Or maybe you even want to host your personal blog or a small Mastodon server on your own computer.&lt;/p&gt;
&lt;p&gt;For any of that to work, though, you’ll need an address the other parties can access. Shockingly, the whole world doesn’t use Tailscale. (We’re working on that.) So you’ll need a publicly routable IP address, a TLS cert (hopefully!), and then necessarily a DNS name for the cert. Tailscale gives you a &lt;a href=&#34;https://tailscale.com/kb/1081/magicdns/&#34;&gt;DNS name&lt;/a&gt; and supports your Tailscale node getting its own &lt;a href=&#34;https://tailscale.com/kb/1153/enabling-https/&#34;&gt;Let’s Encrypt cert&lt;/a&gt; for that DNS name, but your &lt;a href=&#34;https://tailscale.com/kb/1033/ip-and-dns-addresses/&#34;&gt;Tailscale IP addresses&lt;/a&gt; aren’t publicly routable, so those webhooks from GitHub or ActivityPub &lt;a href=&#34;https://docs.joinmastodon.org/user/posting/&#34;&gt;toots&lt;/a&gt; can’t reach you. You’re not really on the internet without a public IP address.&lt;/p&gt;
&lt;p&gt;Yes, you could spin up a $5/month VM somewhere and forward a port from its public internet IP to your tailnet with one line in your &lt;a href=&#34;https://manpages.debian.org/unstable/rinetd/rinetd.8.en.html&#34;&gt;&lt;code&gt;rinetd.conf&lt;/code&gt;&lt;/a&gt; file. But is that fun? Do you really need a(nother) Linux VM in your life?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Here’s something more fun: &lt;a href=&#34;https://tailscale.com/kb/1223/tailscale-funnel&#34;&gt;Tailscale Funnel&lt;/a&gt;&lt;/strong&gt;. You can now expose things from your Tailscale node to the big scary internet and we’ll tunnel it in to you, over Tailscale.&lt;/p&gt;
&lt;h2 id=&#34;how-it-works&#34;&gt;How it works&lt;/h2&gt;
&lt;p&gt;“My VPN is exposed to the internet!!?” we hear you screaming. We’re also the worrying sort, so let’s walk through how it works. Hopefully you’ll find it less scary.&lt;/p&gt;
&lt;p&gt;First off, rest assured that Tailscale Funnel is all off by default and double opt-in: It needs to be both enabled in the Tailscale admin console by a tailnet admin and enabled on the device running Tailscale.&lt;/p&gt;
&lt;p&gt;When enabled, two things happen:&lt;/p&gt;
&lt;p&gt;The first thing we do is set up public DNS records for your &lt;code&gt;node.tailnet.ts.net&lt;/code&gt; MagicDNS name to point to public IP addresses of new servers we’re now running. These new Funnel frontends (&lt;em&gt;fun&lt;/em&gt;ends?) are georeplicated around the world, similar to how we run &lt;a href=&#34;https://tailscale.com/blog/how-tailscale-works/#encrypted-tcp-relays-derp&#34;&gt;DERP servers&lt;/a&gt; around the world. Tailscale Funnel runs on distinct services, VMs, and networks from DERP, but they’re similar in that they’re both hosted by Tailscale. (Like DERP, which you can &lt;a href=&#34;https://tailscale.com/kb/1118/custom-derp-servers/&#34;&gt;run yourself&lt;/a&gt;, you could also do an &lt;code&gt;rinetd&lt;/code&gt; thing yourself for this, if you find that more fun.)&lt;/p&gt;
&lt;p&gt;The second thing we do is add those Funnel ingress nodes to your tailnet’s list of Tailscale peers. On nodes where Tailscale Funnel is enabled you’ll see them in &lt;code&gt;tailscale status --json&lt;/code&gt;. Those peers will be named &lt;code&gt;funnel-ingress-node&lt;/code&gt; and are sent with a bit set marking them as funnel peers. That bit prevents them from having any packet-level access to your tailnet. The only thing they’re allowed to do is offer your node a funneled TCP connection, which your node can accept or reject, depending on how it’s configured.&lt;/p&gt;
&lt;p&gt;(That magic bit will make an appearance in a future blog post; stay tuned!)&lt;/p&gt;
&lt;p&gt;The way the Funnel ingress nodes are allowed to send a connection offer to your nodes is using Tailscale’s inter-node “peerapi” mechanism that we originally added for &lt;a href=&#34;https://tailscale.com/kb/1106/taildrop/&#34;&gt;Taildrop&lt;/a&gt;. With peerapi, each Tailscale node allocates a reserved ephemeral port number to be its inter-node RPC port. Those peerapi RPCs are then just HTTP requests over that port. TCP connections to that port are then intercepted by Tailscale after the WireGuard® decryption, before they hit your operating system. In fact, they’re never delivered to your operating system: We handle the packets and TCP internally with gVisor’s netstack, like we do for &lt;a href=&#34;https://tailscale.com/kb/1193/tailscale-ssh/&#34;&gt;Tailscale SSH&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When somebody goes to &lt;code&gt;node.tailnet.ts.net&lt;/code&gt; in their browser (or other client), a traditional DNS response then points to one of our funnel VMs, ideally in a region near your node.&lt;/p&gt;
&lt;p&gt;We then accept those TCP connections from end users (which must be TLS), look at the SNI name in the &lt;a href=&#34;https://tls13.xargs.org/#client-hello&#34;&gt;TLS ClientHello&lt;/a&gt;, and then proxy those encrypted TCP connections to your Tailscale node over Tailscale itself. Notably, we’re only proxying a TCP connection (which we verified has a valid SNI name in it); Tailscale Funnel is not doing any TLS termination. While it’s true that we could in theory terminate TLS (as we own &lt;code&gt;ts.net&lt;/code&gt; and could get our own Let’s Encrypt certs for it), we don’t want to, and you can verify in the public &lt;a href=&#34;https://en.wikipedia.org/wiki/Certificate_Transparency&#34;&gt;Certificate Transparency&lt;/a&gt; logs that we aren’t.&lt;/p&gt;
&lt;p&gt;So, we’re proxying a TCP connection to your node. But remember, we don’t have packet-level access to your nodes, so we’re not just proxying our public TCP port 443 to your node’s port 443. Instead, our Funnel ingress nodes send one of those aforementioned “peerapi” requests to your node: an HTTP request where the request says the source IP:port and target SNI name and port.&lt;/p&gt;
&lt;p&gt;Your node then receives that peerapi HTTP request and decides for itself, based on configuration that lives only on your Tailscale node: Does it want that TCP connection for that tuple? If not, it rejects it. If so, what should it do with it?&lt;/p&gt;
&lt;p&gt;At a high level, there are two main things Tailscale Funnel can do with that incoming connection. In either case, something on your device has to terminate TLS.&lt;/p&gt;
&lt;p&gt;The first thing you can do is just pass off the TCP connection to a local webserver and let that webserver do the HTTPS. Both &lt;a href=&#34;https://tailscale.com/kb/1190/caddy-certificates/&#34;&gt;Caddy&lt;/a&gt; and &lt;a href=&#34;https://github.com/icing/mod_authnz_tailscale&#34;&gt;Apache&lt;/a&gt; have support for terminating TLS via Tailscale’s certificate fetching mechanism, for example.&lt;/p&gt;
&lt;p&gt;The second thing you can do is have your device’s Tailscale daemon itself terminate TLS. Then it can reverse proxy the HTTP requests to a local non-HTTPS webserver. That is, you run a webserver on &lt;code&gt;localhost:8080&lt;/code&gt; and we put it on the internet, complete with a public IP address, DNS, TLS cert, and HTTPS server. Now that’s a fun tunnel, if we do say so ourselves.&lt;/p&gt;
&lt;h2 id=&#34;now-in-alpha&#34;&gt;Now in alpha&lt;/h2&gt;
&lt;p&gt;Tailscale Funnel is now &lt;a href=&#34;https://tailscale.com/kb/1167/release-stages/#alpha&#34;&gt;in alpha&lt;/a&gt;. To start, we’re going to limit the number of testers and ramp up a bit slowly as we build confidence that all the infrastructure is working. The first batch of users can join the alpha by following &lt;a href=&#34;https://login.tailscale.com/admin/feature/A6T1gWC3sVR&#34;&gt;this link&lt;/a&gt;. The functionality will be available in a stable release starting in Tailscale v1.34.0 but meanwhile you’ll need to be running a recent &lt;a href=&#34;https://pkgs.tailscale.com/unstable/&#34;&gt;unstable build&lt;/a&gt; (v1.33.257 or later) to try it out. After alpha we’ll start opening this up more widely, hopefully soon! In the meantime, check out &lt;a href=&#34;https://tailscale.com/kb/1223/tailscale-funnel&#34;&gt;the documentation&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Tailscale on the Fediverse</title>
      
      
      <link>https://tailscale.com/blog/2022-11-16-fediverse/</link>
      <pubDate>Wed, 16 Nov 2022 00:00:00 +0000</pubDate>
        <author>Xe Iaso</author>
      <guid>https://tailscale.com/blog/2022-11-16-fediverse/</guid>
      <description>&lt;p&gt;Hey everyone! The last few weeks have been something else eh? We want
to make it easier for you to keep in touch with us. As such, we have
created &lt;a href=&#34;https://hachyderm.io/@tailscale&#34;&gt;a Fediverse account&lt;/a&gt; on
&lt;a href=&#34;https://hachyderm.io&#34;&gt;Hachyderm&lt;/a&gt;. Feel free to give us a follow if
you want to keep up to date!&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;re honored to be one of the first corporate accounts on Hachyderm
and in the Fediverse in general. This is a great responsibility and we
are taking this responsibility seriously. We want to be an example of
what a positive and mutually beneficial corporate presence on the
Fediverse should look like. We want to use this opportunity to help
&lt;em&gt;strengthen&lt;/em&gt; the entire Fediverse community as well as help people use
Tailscale in new and exciting ways.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve personally used the Fediverse since 2017, back when Mastodon was
propagating things using OStatus. I&amp;rsquo;ve run bots on the Fediverse for
years. I don&amp;rsquo;t want this to be an example of another corporation
encroaching on a community space and covering it with advertising. I
don&amp;rsquo;t want a repeat of Steak-ums &amp;ldquo;viral marketing&amp;rdquo; or whatever the
heck is going on with Wendy&amp;rsquo;s. I want to take advantage of this clean
break from the whims of AI algorithms and see what we could do if we
could just talk to people more directly in a much more calm way.&lt;/p&gt;
&lt;p&gt;I realize that corporations on the Fediverse is a very new phenomenon
and that a lot of the &amp;ldquo;core&amp;rdquo; Fediverse community has been vastly
against this for a very long time. I can&amp;rsquo;t blame people for feeling
like corporations making accounts on the Fediverse are &lt;em&gt;invading&lt;/em&gt;
their community spaces. This is why we want to &lt;em&gt;set the standard&lt;/em&gt; that
other companies should follow us on. In the process we&amp;rsquo;re going to end
up making tools and integrations that we hope will be useful to you
too. More to come in the future when I have more to talk about.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;ve made the jump to the Fediverse, follow us at
&lt;a href=&#34;https://hachyderm.io/@tailscale&#34;&gt;&lt;code&gt;@tailscale@hachyderm.io&lt;/code&gt;&lt;/a&gt;. We&amp;rsquo;ll be
tooting when we either have awesome things to share or boosting the
awesome things you all have shared. If you want a toot to catch our
attention, please either mention &lt;code&gt;@tailscale@hachyderm.io&lt;/code&gt; or use the
hashtag &lt;code&gt;#tailscale&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Stay tuned, I have plans.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Virtual private services with tsnet</title>
      
      
      <link>https://tailscale.com/blog/tsnet-virtual-private-services/</link>
      <pubDate>Fri, 04 Nov 2022 00:00:00 +0000</pubDate>
        <author>Xe Iaso</author>
      <guid>https://tailscale.com/blog/tsnet-virtual-private-services/</guid>
      <description>&lt;p&gt;Tailscale lets you connect to your computers from anywhere in the world. We call
this setup a virtual private network. Any device on the tailnet (our term for a
Tailscale network) can connect directly to any other device on the tailnet. When
you do this you can access your NAS from anywhere, RDP (Remote Desktop Protocol)
into your gaming PC in Canada to check messages from the Canadian tax authority,
or even SSH into production with &lt;a href=&#34;https://tailscale.com/tailscale-ssh/&#34;&gt;Tailscale
SSH&lt;/a&gt;. Everything will just work.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;This isn&amp;rsquo;t limited to your computers, phones, and servers, though. You can use
Tailscale as a library in Go programs to allow them to connect to your tailnet
as though it were a separate computer. You can also use Tailscale to run
multiple services with different confidentiality levels on the same machine.
This will allow you to separate support tooling from data analytics without
having to run them on multiple servers or virtual machines. The only way that
the tools could be exposed is over Tailscale — meaning that there&amp;rsquo;s no way to
get into them from outside your tailnet.&lt;/p&gt;
&lt;p&gt;Today I&amp;rsquo;m going to explain more about how you can use &lt;code&gt;tsnet&lt;/code&gt; to make your
internal services easier to run, access, and secure by transforming them into
virtual private services on your tailnet. By the end of this post you should
have an understanding of what virtual private services are, how they benefit
you, and how to write one using Tailscale as a library. Finally, I will give you
some ideas for how you could take this one step further.&lt;/p&gt;
&lt;h2 id=&#34;virtual-private-services&#34;&gt;Virtual private services&lt;/h2&gt;
&lt;p&gt;When you add a laptop or phone to your tailnet, Tailscale assigns it its own IP
address and DNS name. This allows you to connect over Tailscale&amp;rsquo;s encrypted
tunnel so you can access your NAS from the coffee shop to grab whatever files
you need. This also allows you to &lt;a href=&#34;https://tailscale.com/blog/tls-certs/&#34;&gt;request an HTTPS certificate from Let&amp;rsquo;s
Encrypt&lt;/a&gt; so you can run whatever services
you want over HTTPS.&lt;/p&gt;
&lt;p&gt;However, this only lets you get one DNS name and IP address per system.
Currently, running multiple services with separate domain names on the same
system is impossible with Tailscale, but there is a workaround. Using
&lt;a href=&#34;https://pkg.go.dev/tailscale.com/tsnet&#34;&gt;&lt;code&gt;tsnet&lt;/code&gt;&lt;/a&gt;, you can embed Tailscale as a
library in an existing Go program. &lt;code&gt;tsnet&lt;/code&gt; takes all of the goodness of
Tailscale and lets you access it all from userspace instead of having to wade
through the nightmare of configuring multiple VPN connections on the same
machines.&lt;/p&gt;
&lt;p&gt;When you start a virtual private service with &lt;code&gt;tsnet&lt;/code&gt;, your Go program will get
its own IP address, DNS name, and the ability to grab its own HTTPS certificate.
You can ping the service instead of the server it&amp;rsquo;s on. You can listen on
privileged ports like the HTTP and HTTPS ports without having to run your
service as root. You can use ACL tags and groups to separate out access to that
service individually. Finally, you can run multiple of these services on the
same machine without having to have root permissions or do anything beyond
running the programs on the machines. You don&amp;rsquo;t even need to expose them
anywhere else besides over Tailscale. All of this happens in the same OS
process: All the magic of Tailscale becomes a library like any other, allowing
you to create virtual private services for your team.&lt;/p&gt;
&lt;h2 id=&#34;how-to-make-your-own-hello-server&#34;&gt;How to make your own hello server&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;m going to show you how to create a minimal &amp;ldquo;hello&amp;rdquo; service that will let any
connecting user know who Tailscale thinks they are. To start, install the latest
version of the &lt;a href=&#34;https://go.dev/dl&#34;&gt;Go programming language&lt;/a&gt; and restart your
terminal program. Next, create a folder for the code with a command such as
this:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mkdir -p ~/code/whoami
cd ~/code/whoami
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then create a new Go project with this command:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;go mod init github.com/your-username/whoami
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Install &lt;code&gt;tsnet&lt;/code&gt; with this command:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;go get tailscale.com/tsnet
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then make a &lt;code&gt;main.go&lt;/code&gt; file with the following in it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;s&#34;&gt;&amp;#34;flag&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;s&#34;&gt;&amp;#34;html&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;s&#34;&gt;&amp;#34;log&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;s&#34;&gt;&amp;#34;net/http&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;s&#34;&gt;&amp;#34;strings&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;s&#34;&gt;&amp;#34;tailscale.com/tsnet&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;nx&#34;&gt;hostname&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;flag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;hostname&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;hostname for the tailnet&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;nx&#34;&gt;flag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Parse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;tsnet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Server&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;nx&#34;&gt;Hostname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hostname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;defer&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;nx&#34;&gt;ln&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Listen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;tcp&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;:80&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Fatal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;defer&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ln&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;nx&#34;&gt;lc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;LocalClient&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Fatal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Fatal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Serve&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ln&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;HandlerFunc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ResponseWriter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;nx&#34;&gt;who&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;lc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;WhoIs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;RemoteAddr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&lt;span class=&#34;nx&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;500&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Fprintf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;&amp;lt;h1&amp;gt;Hello, world!&amp;lt;/h1&amp;gt;\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Fprintf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;lt;p&amp;gt;You are &amp;lt;b&amp;gt;%s&amp;lt;/b&amp;gt; from &amp;lt;b&amp;gt;%s&amp;lt;/b&amp;gt; (%s)&amp;lt;/p&amp;gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&lt;span class=&#34;nx&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;EscapeString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;who&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;UserProfile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;LoginName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&lt;span class=&#34;nx&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;EscapeString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;firstLabel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;who&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ComputedName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;RemoteAddr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;p&#34;&gt;})))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;firstLabel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hostname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ok&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;strings&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Cut&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ok&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hostname&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then generate a new auth key in the &lt;a href=&#34;https://login.tailscale.com/admin/settings/keys&#34;&gt;admin
panel&lt;/a&gt; and set it as
&lt;code&gt;TS_AUTHKEY=&lt;/code&gt; in your environment:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;export TS_AUTHKEY=tskey-auth-hunter2-hunter2hunter2hunter2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then you can run it:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;go run .
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once it shows up in your tailnet, you can open &lt;a href=&#34;http://hello&#34;&gt;http://hello&lt;/a&gt; and
you&amp;rsquo;ll get back a simple page that tells you who you are on Tailscale:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image1.jpg&#34; alt=&#34;alt_text&#34; title=&#34;a browser window showing a &#39;hello&#39; message to Xe on the device mara&#34;&gt;&lt;/p&gt;
&lt;p&gt;You can use this as the basis for other services, too. Replace the
&lt;code&gt;http.HandlerFunc&lt;/code&gt; with a &lt;code&gt;http.ServeMux&lt;/code&gt; and you can host an internal-facing
service.&lt;/p&gt;
&lt;h2 id=&#34;other-examples&#34;&gt;Other examples&lt;/h2&gt;
&lt;p&gt;If you need inspiration, here are some ways that we&amp;rsquo;ve used &lt;code&gt;tsnet&lt;/code&gt; for
ourselves here at Tailscale.&lt;/p&gt;
&lt;p&gt;One of our first deployments of &lt;code&gt;tsnet&lt;/code&gt; was aimed at helping our support team
get context for incoming tickets. The support UI we used wasn&amp;rsquo;t good at giving
us information about users, and the process of having to manually look up
everything we needed to know was time-consuming and tedious.&lt;/p&gt;
&lt;p&gt;We wanted to get the support team more information so they could do their job,
but we also didn&amp;rsquo;t want to open that tool up to the public internet (and risk
catastrophic data breaches). We used &lt;code&gt;tsnet&lt;/code&gt; to create a service named DAB (Data
About Business) that would work &lt;em&gt;with&lt;/em&gt; our support tooling so that when support
opened a ticket, they got all the information they needed from our control plane
at a glance. DAB has been one of our most reliable services inside Tailscale,
and it&amp;rsquo;s hosted on a single AWS instance. HTTPS was seamless with Let&amp;rsquo;s Encrypt.
DAB has easily been the most successful internal project I have ever worked on.&lt;/p&gt;
&lt;p&gt;Creating new services is cool, but what&amp;rsquo;s even cooler is that you can use
&lt;code&gt;tsnet&lt;/code&gt; to help bridge the gap between Tailscale&amp;rsquo;s account model and the account
model of internal tools like Grafana. We use a tool called
&lt;a href=&#34;https://tailscale.com/blog/grafana-auth/&#34;&gt;&lt;code&gt;proxy-to-grafana&lt;/code&gt;&lt;/a&gt; inside Tailscale
to let us browse and even edit Grafana dashboards without having to have
separate Grafana accounts or manage access permissions. We just visit
&lt;code&gt;http://mon&lt;/code&gt;, and we can do whatever we want.&lt;/p&gt;
&lt;p&gt;This isn&amp;rsquo;t limited to web services like Grafana. You can even use &lt;a href=&#34;https://tailscale.com/blog/tailscale-auth-minecraft/&#34;&gt;&lt;code&gt;tsnet&lt;/code&gt; to
authenticate to
Minecraft&lt;/a&gt;, or as a &lt;a href=&#34;https://tailscale.com/blog/introducing-pgproxy/&#34;&gt;proxy
for Postgres&lt;/a&gt; to lock down
access to your sensitive databases.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ve heard about people using &lt;code&gt;tsnet&lt;/code&gt; to expose Prometheus metrics and REPL
access exclusively over Tailscale. This has allowed those operators to be able
to poke inside services &lt;em&gt;in production&lt;/em&gt; without having to worry about making
custom authentication logic, deal with OAuth2 proxies or other setups to glue it
into their identity providers. Access is controlled via Tailscale
&lt;a href=&#34;https://tailscale.com/kb/1018/acls/&#34;&gt;ACLs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;What else could you do with this? How do you use &lt;code&gt;tsnet&lt;/code&gt; in your tailnet? We&amp;rsquo;d
love to hear more! Mention us on Twitter
&lt;a href=&#34;https://twitter.com/tailscale&#34;&gt;@Tailscale&lt;/a&gt; or post on &lt;a href=&#34;https://reddit.com/r/tailscale&#34;&gt;/r/tailscale on
Reddit&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Making your Tailscale experience a little more eventful with webhooks</title>
      
      
      <link>https://tailscale.com/blog/webhooks-design/</link>
      <pubDate>Thu, 03 Nov 2022 00:00:00 +0000</pubDate>
      <author>Laura Florea</author>
      <guid>https://tailscale.com/blog/webhooks-design/</guid>
      <description>&lt;p&gt;Tailscale is amazing. But you already knew that, right? There’s nothing more satisfying than being able to set up a secure network in seconds, almost like magic — except maybe realizing it’s Friday when you thought it was Thursday, but I digress.&lt;/p&gt;
&lt;p&gt;Being a relatively new product, Tailscale is still adding features to make it even easier to use. One of the most requested features from both our enterprise customers as well as individual users are notifications for events happening in your tailnet, such as when new nodes are added or need to be authorized. Before Tailscale introduced the new feature I’m about to mention (shh&amp;hellip; I know you saw it in the title, but just pretend you didn’t for a second), there wasn’t really a way for the admin of a tailnet to know if something had changed without constantly stalking the admin console for new warning badges on machines, or scrolling through the &lt;a href=&#34;https://tailscale.com/kb/1203/audit-logging/&#34;&gt;configuration audit logs&lt;/a&gt; for updates.&lt;/p&gt;
&lt;p&gt;During my internship at Tailscale this past summer, I set out to fill this notification gap. (“I” meaning me, Laura the intern, not to be confused with the lovely individual of the same name who has been writing the Tailscale newsletter every month.) As a result of my (and many other peoples’) summer-long efforts, Tailscale now allows you to configure webhooks to notify you of specific kinds of events in your tailnet.&lt;/p&gt;
&lt;h3 id=&#34;-hi-im-laura&#34;&gt;👋 Hi! I’m Laura&lt;/h3&gt;
&lt;p&gt;Before I begin, I’d like to share &lt;a href=&#34;https://www.linkedin.com/in/laura-florea/&#34;&gt;a little bit about myself&lt;/a&gt;. I&amp;rsquo;m a fourth year software engineering student at the University of Waterloo who loves designing, building, and automating systems. I love learning how to use new tools and technologies in hopes of creating something that can benefit people and the world around me. When I first learned about Tailscale, I was completely blown away by how the company was able to create a VPN that was both painless to set up and incredibly secure. It was an honor for me to be able to contribute to such an amazing product over the course of my internship, and I am so excited to be able to share my work with you and make your experience using Tailscale even better!&lt;/p&gt;
&lt;h3 id=&#34;how-tailscale-webhooks-work&#34;&gt;How Tailscale webhooks work&lt;/h3&gt;
&lt;p&gt;Now back to our regularly scheduled programming. The new feature that we’ve developed is none other than (drumroll please) … &lt;a href=&#34;https://tailscale.com/kb/1213/webhooks/&#34;&gt;webhooks&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;In general, webhooks are a method of providing push notifications that are triggered when certain events occur in a web application. They are essentially reverse APIs, requiring the user to set up a destination URL to which the webhook provider delivers requests containing event data. Afterward, when an event occurs, the webhook provider will then make a POST request to the destination URL to deliver the webhook to the user.&lt;/p&gt;
&lt;h3 id=&#34;so-how-does-a-tailscale-webhook-actually-get-sent-to-me&#34;&gt;So how does a Tailscale webhook actually get sent to me?&lt;/h3&gt;
&lt;p&gt;I’m glad you asked; it’s really not that difficult of a process. First, &lt;a href=&#34;https://login.tailscale.com/admin/settings/webhooks&#34;&gt;create a webhook endpoint from the admin console&lt;/a&gt;. Next, choose the notification events you want to subscribe to and submit the form. After that, event triggers will recognize that events have to be sent to your endpoint. Event triggers are essentially functions in code on the Tailscale coordination server that get set off by notification-worthy tailnet behavior, and they determine whether to actually notify you based on your endpoint subscription preferences. When an event happens on your tailnet that your endpoint is subscribed to, the associated event trigger will create a &lt;a href=&#34;https://tailscale.com/kb/1213/webhooks/#events-payload&#34;&gt;payload&lt;/a&gt; with information about that event — such as the time the event occured or the type of event, and it might even contain a link to the admin console if an action needs to be taken.&lt;/p&gt;
&lt;p&gt;After the payload is created, it gets queued up to be sent out. Queued-up events are requested in batches via a separate publisher service, which handles the actual sending of events. Once received by the service, it makes an HTTP POST request containing all the events that have to be sent to your endpoint within the batch it received. If your endpoint returns an error (non-2xx) status code, we’ll retry the request later on. In particular, we retry failing events hourly for up to 24 hours in order to give you time to fix your broken endpoint.&lt;/p&gt;
&lt;p&gt;That’s about it! On your side, you choose what to do when you receive a webhook, like post a message to Slack or fire an alert.&lt;/p&gt;
&lt;p&gt;To summarize and put everything what we’ve just discussed into perspective, here’s a system diagram depicting the internal process of how a webhook gets sent to a user:&lt;/p&gt;

    
    

&lt;figure class=&#34;image-wide&#34;&gt;
        &lt;img src=&#34;https://tailscale.com/blog/webhooks-design/webhooks.svg&#34; alt=&#34;a system diagram depicting the internal process of how a webhook gets sent to a user&#34; /&gt;
    
&lt;/figure&gt;

&lt;h3 id=&#34;security-considerations&#34;&gt;Security considerations&lt;/h3&gt;
&lt;p&gt;While the process of sending a webhook seems pretty straightforward, there were certainly a bunch of design challenges and security concerns we had to be aware of when actually designing the webhook delivery system. To achieve this, we had to set up a proxy server, sign events with a shared secret key, and validate endpoints; all of which are discussed in more detail below.&lt;/p&gt;
&lt;p&gt;The main security concern with webhooks in general is the fact that we, the webhook producer, have to make HTTPS POST requests out in order to deliver events to consumer endpoints. The issue with making these requests is that we have no idea if the consumer is actually a safe destination to connect to. We also have no way to validate that the endpoint &lt;em&gt;wants&lt;/em&gt; to be receiving our traffic. Someone might have set up an endpoint that results in events being sent to Tailscale’s internal infrastructure, or to someone else’s infrastructure. Both of the aforementioned scenarios could result in DDoS attacks, which are attacks designed specifically to overwhelm servers to “deny service” to users.&lt;/p&gt;
&lt;p&gt;So, in order to prevent the first issue — events being sent to Tailscale’s internal infrastructure, via server-side request forgery (SSRF) — the publisher for webhook events exists on a proxy server outside of the main coordination server. In order to prevent SSRF, we use a customized HTTP client to send webhooks, created by Tailscale’s own Andrew Dunham. It uses a &lt;a href=&#34;https://pkg.go.dev/net#Dialer&#34;&gt;net.Dialer&lt;/a&gt; that doesn’t allow connections to destinations that resolve to Tailscale’s internal IPs. This DNS lookup ensures that it is only possible to send webhooks to public IP addresses and eliminates the above security concern.&lt;/p&gt;
&lt;p&gt;We also want to prevent attackers from using our webhooks to try a DDoS attack against others. To do this, we stop sending webhooks after several retries if we’re getting non-2xx responses. And, to ensure you’ve configured webhooks correctly, you can send a test event as part of setup.&lt;/p&gt;
&lt;p&gt;Furthermore, designing the system such that the webhook dispatch service lives on a separate proxy server helps alleviate some of the load that would otherwise be placed on Tailscale’s coordination server. This server handles the main functionality Tailscale provides, so moving non-essential functionality elsewhere results in better performance.&lt;/p&gt;
&lt;p&gt;On top of keeping our internal infrastructure safe, we also wanted to make sure that you can trust that the notifications you’re receiving via webhooks are coming from Tailscale, and haven’t been tampered with or replayed. We do this by generating a shared secret key, signing the webhook, and sending that signature and the current timestamp as part of the event list’s payload header. When you receive the events, you can then &lt;a href=&#34;https://tailscale.com/kb/1213/webhooks/#verifying-an-event-signature&#34;&gt;check if it’s actually from us&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In addition, we only allow you to configure HTTPS webhook endpoints and not HTTP ones — this ensures that the data sent in the requests are encrypted.&lt;/p&gt;
&lt;p&gt;As I was the main designer and developer of the webhooks feature during my internship, I was really able to put my systems design and development experience to the test. I learned so much about how careful you have to be when designing systems to ensure that they are secure and scalable. As the system was being designed and developed, there were several tweaks that were made to the design to allow it to perform better. I am truly grateful to all of the engineers at Tailscale who provided feedback on the system during the design and development processes. Without them, the design of the system wouldn’t be where it is today, and I have definitely become a better engineer through their guidance.&lt;/p&gt;
&lt;p&gt;I’m so excited that we are now able to share this feature with you. If you’re interested in receiving notifications for the various events that can happen in your tailnet, &lt;a href=&#34;https://tailscale.com/blog/webhooks/&#34;&gt;webhooks are now available&lt;/a&gt;! We’ll continue to add events to webhooks. To request something specific, &lt;a href=&#34;https://github.com/tailscale/tailscale/issues/&#34;&gt;file a feature request on GitHub&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>October Tailscale newsletter</title>
      
      
      <link>https://tailscale.com/blog/2022-10-newsletter/</link>
      <pubDate>Mon, 31 Oct 2022 00:00:00 +0000</pubDate>
      <author>Jessica Webb Kennedy</author>
      <guid>https://tailscale.com/blog/2022-10-newsletter/</guid>
      <description>This is a re-publishing of our monthly newsletter sent to subscribers earlier this month. &lt;a href=&#34;https://gavzih9v2tc.typeform.com/to/NaDeoA4y&#34;&gt;Sign up to receive future email newsletters&lt;/a&gt;.&lt;hr/&gt;&lt;p&gt;👉 We’d love to hear what you think about Tailscale, and filling out this &lt;a href=&#34;https://forms.gle/FA9UJwiTbdoRzKsK7&#34;&gt;Google form&lt;/a&gt; helps us build a better product for you!&lt;/p&gt;
&lt;p&gt;It’s been a BIG month at Tailscale and we’re excited to share several new features with you. First off, &lt;a href=&#34;https://tailscale.com/blog/magicdns/&#34;&gt;MagicDNS is now GA&lt;/a&gt; (human-readable DNS names for each device in your tailnet). Speaking of DNS… have you ever wanted to run your own DNS resolver to block ads — but don’t &lt;em&gt;actually&lt;/em&gt; want to run your own DNS resolver? &lt;a href=&#34;https://tailscale.com/blog/nextdns/&#34;&gt;Tailscale now supports NextDNS&lt;/a&gt;. We’ve also been hard at work on &lt;a href=&#34;https://tailscale.com/blog/config-audit-logging/&#34;&gt;configuration audit logs&lt;/a&gt; (now in beta) so you can track changes to your tailnet, and use &lt;a href=&#34;https://tailscale.com/blog/webhooks/&#34;&gt;webhooks&lt;/a&gt; to get notified about changes or misconfigurations. We’re also making it safer to work remotely, even if there’s an emergency, with &lt;a href=&#34;https://tailscale.com/blog/ssh-console&#34;&gt;Tailscale SSH Console&lt;/a&gt; — which lets users initiate a secure browser-based SSH session from any device even if Tailscale isn’t installed on that device.&lt;/p&gt;
&lt;p&gt;If the features above sound interesting, and you happen to be looking for a new gig, Tailscale is hiring! We’re looking for driven individuals who think differently, enjoy collaborating with highly technical remote teams, and are comfortable working asynchronously. See our open roles below, and learn more about &lt;a href=&#34;https://tailscale.com/company/&#34;&gt;our company vision&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://boards.greenhouse.io/tailscale/jobs/4093171005&#34;&gt;Developer Advocate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boards.greenhouse.io/tailscale/jobs/4058901005&#34;&gt;Software Engineer: Growth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boards.greenhouse.io/tailscale/jobs/4053245005&#34;&gt;Product Manager&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boards.greenhouse.io/tailscale/jobs/4051721005&#34;&gt;Senior Product Designer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boards.greenhouse.io/tailscale/jobs/4038875005&#34;&gt;Recruiter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We’ve got lots of new community contributions and exciting new Tailscale features we’d love to tell you about, let’s check ’em out:&lt;/p&gt;
&lt;h3 id=&#34;from-the-community&#34;&gt;From the community&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://notado.substack.com/p/how-flyio-and-tailscale-saved-notado&#34;&gt;&lt;strong&gt;How Fly.io and Tailscale saved Notado&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
Learn the technical details of how &lt;a href=&#34;https://notado.app/&#34;&gt;Notado&lt;/a&gt; was modified to migrate from DigitalOcean to &lt;a href=&#34;http://fly.io/&#34;&gt;Fly.io&lt;/a&gt; using Tailscale to make private connections from a Fly micro VM to a DigitalOcean-managed Postgres database.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.duolingo.com/developer-onboarding-with-github-codespaces/&#34;&gt;&lt;strong&gt;How Duolingo simplified developer onboarding with GitHub Codespaces + Tailscale&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
Duolingo shares how they made it easy for new developers to access private resources with Tailscale.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=bN3q_F8NIH8&#34;&gt;&lt;strong&gt;Run a Tailscale exit node on your phone&lt;/strong&gt;&lt;/a&gt; [video]&lt;br&gt;
After updating Tailscale on his Android phone, Twitter user &lt;a href=&#34;https://twitter.com/patsheadcom&#34;&gt;@patsheadcom&lt;/a&gt; discovered that he can use his phone as a Tailscale exit node!&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/damomurf/coredns-tailscale&#34;&gt;&lt;strong&gt;A CoreDNS plugin implementation for Tailscale networks&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
Twitter user &lt;a href=&#34;https://twitter.com/@damomurf&#34;&gt;@damomurf&lt;/a&gt; created a CoreDNS plugin for Tailscale to resolve Tailscale machines under your own domain, even with nice CNAMEs for virtual services.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=3hpfpKUDf2o&amp;amp;t=1s&#34;&gt;&lt;strong&gt;Tailscale and TrueCharts&lt;/strong&gt;&lt;/a&gt; [video]&lt;br&gt;
Twitter user &lt;a href=&#34;https://twitter.com/@briancmoses&#34;&gt;@briancmoses&lt;/a&gt; was thrilled when the &lt;a href=&#34;https://twitter.com/useTrueCharts&#34;&gt;@useTrueCharts&lt;/a&gt; team recently added a Tailscale app to their &lt;a href=&#34;https://twitter.com/TrueNAS&#34;&gt;@TrueNAS&lt;/a&gt; catalog to install Tailscale and share nodes.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leaningtech.com/webvm-virtual-machine-with-networking-via-tailscale/&#34;&gt;&lt;strong&gt;WebVM: Linux virtualization in WebAssembly with full networking via Tailscale&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://leaningtech.com/author/yuri/&#34;&gt;Yuri Iozzelli&lt;/a&gt; at &lt;a href=&#34;https://leaningtech.com/&#34;&gt;Leaning Technologies&lt;/a&gt; explains how Tailscale helped solve networking challenges in WebVM.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/SeanHood/tailscale-netcat&#34;&gt;&lt;strong&gt;Netcat and Tailscale&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
Twitter user &lt;a href=&#34;https://twitter.com/@SeanHood&#34;&gt;@SeanHood&lt;/a&gt; shares a tool designed to imitate netcat for the purposes of SSH&amp;rsquo;s ProxyCommand.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://lwn.net/SubscriberLink/910766/7678f8c4ede60928/&#34;&gt;&lt;strong&gt;Identity management for WireGuard®&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
Jordan Webb, an &lt;a href=&#34;https://lwn.net/&#34;&gt;LWN.net&lt;/a&gt; contributor, highlights open-source tools that can automate key management and make using WireGuard easier for both administrators and end users.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://steampipe.io/blog/tailscale-security-compliance&#34;&gt;&lt;strong&gt;How to approach Tailscale security and compliance&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://steampipe.io/&#34;&gt;Steampipe&lt;/a&gt; evangelist &lt;a href=&#34;https://twitter.com/jcfarris&#34;&gt;Chris Farris&lt;/a&gt; highlights how Steampipe can help manage the security and compliance of your Tailscale network.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/caius/omniauth-tailscale&#34;&gt;&lt;strong&gt;OmniAuth Strategy for authenticating via Tailscale&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
An unofficial OmniAuth Strategy for authenticating via Tailscale.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/jaxxstorm/connecti&#34;&gt;&lt;strong&gt;Connecti for Tailscale&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
Connecti is a command line tool to quickly connect you to cloud infrastructure via Tailscale.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/tobruzh/status/1583453592735780865&#34;&gt;&lt;strong&gt;Using Tailscale on APPUiO Cloud&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://www.vshn.ch/blog/vshn-hackday-tailscale-on-appuio-cloud/&#34;&gt;Read more&lt;/a&gt; about how as part of VSHN #HackDay Twitter users &lt;a href=&#34;https://twitter.com/tobruzh&#34;&gt;@tobruzh&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/__simu__&#34;&gt;@&lt;strong&gt;simu&lt;/strong&gt;&lt;/a&gt;figured out how to use Tailscale on APPUiO Cloud. More about how it works &lt;a href=&#34;https://docs.appuio.cloud/user/how-to/tailscale.html&#34;&gt;in the docs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Want to be included in future Tailscale newsletters? Tag &lt;a href=&#34;https://twitter.com/Tailscale&#34;&gt;@Tailscale&lt;/a&gt; in your rant, guides, or tutorials on Twitter.&lt;/p&gt;
&lt;h3 id=&#34;from-the-team&#34;&gt;From the team&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://tailscale.com/blog/magicdns/&#34;&gt;&lt;strong&gt;MagicDNS is generally available&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
MagicDNS automatically registers a human-readable, easy-to-remember DNS name for each device in your tailnet, and it&amp;rsquo;s now enabled by default for all new tailnets!&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://tailscale.com/blog/magicdns-why-name/&#34;&gt;&lt;strong&gt;What&amp;rsquo;s in a name? Why it&amp;rsquo;s called &amp;ldquo;MagicDNS&amp;rdquo; and how it actually works&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
Go behind the scenes with the team to discover how MagicDNS works and why we named it what we did.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://tailscale.com/blog/nextdns/&#34;&gt;&lt;strong&gt;Use NextDNS everywhere you use Tailscale&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
With NextDNS and Tailscale, configure DNS exactly how you want, including blocking ads and trackers, or setting up kids&amp;rsquo; profiles. Use NextDNS for all the devices in your tailnet, including mobile devices.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://tailscale.com/blog/config-audit-logging/&#34;&gt;&lt;strong&gt;Use configuration audit logs (beta) to track changes in your tailnet&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
Understand what changes were made to your Tailscale network, and who made them, with configuration audit logs.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://tailscale.com/blog/ssh-console&#34;&gt;&lt;strong&gt;Introducing a web-based SSH client: Tailscale SSH Console&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
SSH from your browser to devices on your Tailscale network. Initiate a secure browser-based SSH session from any device, even if you aren&amp;rsquo;t running Tailscale on that device.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://tailscale.com/blog/webhooks/&#34;&gt;&lt;strong&gt;Get notifications for events on your tailnet with webhooks&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
Get notifications for events on your tailnet with webhooks. You can configure webhooks to be sent to any HTTPS endpoint — for example, receiving notifications of changes to your ACLs in a Slack channel.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://tailscale.com/blog/introducing-pgproxy/&#34;&gt;&lt;strong&gt;Don’t make databases available on the public internet&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
Tailscale’s &lt;a href=&#34;https://twitter.com/dave_universetf&#34;&gt;Dave Anderson&lt;/a&gt; addresses an excellent &lt;a href=&#34;https://innerjoin.bit.io/the-majority-of-postgresql-servers-on-the-internet-are-insecure-f1e5ea4b3da3&#34;&gt;review of PostgreSQL security&lt;/a&gt; by the folks at &lt;a href=&#34;http://bit.io/&#34;&gt;bit.io&lt;/a&gt;. Turns out, the vast majority of PostgreSQL connections that are happening over the public internet are insecure&amp;hellip; but Tailscale can help!&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://dojo.live/interviews/better-living-through-small-networks-avery-pennarun-tailscale/&#34;&gt;&lt;strong&gt;Better Living Through Small Networks&lt;/strong&gt;&lt;/a&gt; [video]&lt;br&gt;
Tailscale CEO Avery Pennarun sat down with &lt;a href=&#34;https://dojo.live/&#34;&gt;dojo.live&lt;/a&gt; to talk about how the internet can be a dangerous place, and what we might be able to do to make it better.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.heavybit.com/library/podcasts/the-kubelist-podcast/ep-33-tailscale-with-avery-pennarun?utm_campaign=coschedule&amp;amp;utm_source=twitter&amp;amp;utm_medium=heavybit&amp;amp;utm_content=The%20Kubelist%20Podcast%20-%20Ep.%20%2333,%20Tailscale%20with%20Avery%20Pennarun&#34;&gt;&lt;strong&gt;The Kubelist Podcast (ep. 33)&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
Tailscale CEO &lt;a href=&#34;https://twitter.com/apenwarr&#34;&gt;@apenwarr&lt;/a&gt; explores VPNs, mesh-overlay networks, Tailscale use cases, and lessons from 20+ years in development with &lt;a href=&#34;https://twitter.com/mccode&#34;&gt;@mccode&lt;/a&gt; of the Kubelist Podcast &lt;a href=&#34;https://twitter.com/readkubelist&#34;&gt;@readkubelist&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;tailscale-customer-stories&#34;&gt;Tailscale customer stories&lt;/h3&gt;
&lt;p&gt;Learn how Tailscale simplifies networking and brings peace-of-mind to teams of any size.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://tailscale.com/customers/mercari/&#34;&gt;&lt;strong&gt;How Mercari improved accessibility, security, and made VPNs simple with Tailscale&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
Tokyo-based e-commerce company &lt;a href=&#34;https://www.mercari.com/&#34;&gt;Mercari&lt;/a&gt; switched to Tailscale for its VPN solution and concludes: “It’s like magic.”&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://tailscale.com/customers/machinify/&#34;&gt;&lt;strong&gt;Machinify gets HITRUST with low overhead using Tailscale SSH and ACLs&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://www.machinify.com/home/&#34;&gt;Machinify&lt;/a&gt; rolled out Tailscale to help meet strict healthcare compliance requirements. Machinify principal engineer Gavin Ray reflects: “It was the most joyous experience I’ve had with any commercial product.”&lt;/p&gt;
&lt;h3 id=&#34;tailscale-learning-library&#34;&gt;Tailscale learning library&lt;/h3&gt;
&lt;p&gt;We are building a learning library to help folks at any stage in their career. If you have a topic you’d like to see covered, send us a tweet &lt;a href=&#34;https://twitter.com/Tailscale&#34;&gt;@Tailscale&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://tailscale.com/learn/identity-and-access-management/&#34;&gt;&lt;strong&gt;Identity and access management&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
Identity and access management (IAM) helps keep your organization’s resources and information secure. Learn the principles of IAM and best practices for implementing it.&lt;/p&gt;
&lt;p&gt;That’s all for now. Stay well!&lt;/p&gt;
&lt;p&gt;🔈 P.S. Leaving a review on G2 helps more teams find Tailscale. We don’t ask this often — but we’d really appreciate it if &lt;a href=&#34;https://www.g2.com/products/tailscale/reviews/start?return_to=https%3A%2F%2Fwww.g2.com%2Fproducts%2Ftailscale%2Ftake_survey&#34;&gt;you took the time to put in a good word&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>An epic treatise on DNS, magical and otherwise
</title>
      
      
      <link>https://tailscale.com/blog/magicdns-why-name/</link>
      <pubDate>Fri, 28 Oct 2022 15:00:00 +0000</pubDate>
      <author>Xe Iaso, Avery Pennarun</author>
      <guid>https://tailscale.com/blog/magicdns-why-name/</guid>
      <description>&lt;!-- vale tailscale.terms = NO --&gt;
&lt;p&gt;Naming products is hard. One of Tailscale&amp;rsquo;s key features, MagicDNS, has long
been a source of armchair grammar controversy. To wit: Some people think we
should call it Magic DNS because Apple calls their flagship keyboard and mouse
the Magic Keyboard and the Magic Mouse.&lt;/p&gt;
&lt;!-- vale tailscale.terms = YES --&gt;
&lt;!--more --&gt;
&lt;p&gt;But have you noticed that Apple also calls their laptops MacBooks and their
wireless headphones AirPods? The reason they do this is because of an obscure
(and nerdy) rule of the English language that says if removing the adjective
from a noun phrase would change the meaning of the noun, you can remove the
space and make it a compound word. A Magic Keyboard without the magic is still a
keyboard. A MacBook without the Mac is not a book. MagicDNS is one word because
without the magic, it wouldn&amp;rsquo;t just be DNS; it wouldn&amp;rsquo;t be anything. Tailscale
already has DNS and split DNS (two words!) configurations; but MagicDNS isn’t
just DNS, it’s something different.&lt;/p&gt;


&lt;div class=&#34;p-4 flex space-x-4&#34;&gt;
    &lt;div class=&#34;w-16 h-16 shrink-0 rounded-full overflow-hidden bg-gray-100 flex items-center justify-center self-center&#34;&gt;
        &lt;img class=&#34;object-cover object-center&#34; src=&#34;./xe.png&#34; alt=&#34;An image of Xe&#34; /&gt;
    &lt;/div&gt;
    &lt;div class=&#34;self-center min-w-0&#34;&gt;&amp;lt;&lt;b&gt;Xe&lt;/b&gt;&amp;gt; They also can do this for trademark reasons! It&amp;rsquo;s easier to get trademark status
on non-generic words than it is for things like &amp;ldquo;bread,&amp;rdquo; &amp;ldquo;keyboard,&amp;rdquo; &amp;ldquo;book,&amp;rdquo; or
&amp;ldquo;pods.&amp;rdquo;&lt;/div&gt;
&lt;/div&gt;



&lt;div class=&#34;p-4 flex space-x-4&#34;&gt;
    &lt;div class=&#34;w-16 h-16 shrink-0 rounded-full overflow-hidden bg-gray-100 flex items-center justify-center self-center&#34;&gt;
        &lt;img class=&#34;object-cover object-center&#34; src=&#34;./avery.png&#34; alt=&#34;An image of Avery&#34; /&gt;
    &lt;/div&gt;
    &lt;div class=&#34;self-center min-w-0&#34;&gt;&amp;lt;&lt;b&gt;Avery&lt;/b&gt;&amp;gt; On the other hand, to avoid the trademark minefield, sometimes big companies
name products in the form &amp;lt;Trademark&amp;gt; &amp;lt;Generic&amp;gt;, like Microsoft Word
or Google Mail. If a product name contains your company name, you can be pretty
confident nobody else called their product that.&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Tailscale lets you &lt;a href=&#34;https://tailscale.com/kb/1054/dns/&#34;&gt;manage your machine&amp;rsquo;s DNS
configuration&lt;/a&gt;. This lets you set what DNS
servers machines should prefer for either the entire internet or anything
matching a specific domain (split DNS). This is neat, and it makes local DNS
configuration work more like people often expect it to when they optimistically
add multiple DNS resolvers to &lt;code&gt;/etc/resolv.conf&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But that&amp;rsquo;s not MagicDNS — that&amp;rsquo;s just DNS a little bit better. MagicDNS builds
&lt;em&gt;on top&lt;/em&gt; of these features. It makes DNS safe for new use cases by totally
flipping around how name resolution works. It&amp;rsquo;s a building block that Tailscale
and your infrastructure can build on top of.&lt;/p&gt;
&lt;p&gt;Today we&amp;rsquo;re going to take a look at the problem space of DNS, how complexity has
been layered on over the years, and how MagicDNS cuts through all that
complexity and makes everything more reliable in the process.&lt;/p&gt;
&lt;h2 id=&#34;the-tragedy-of-dns-naming-things-but-with-cache-invalidation&#34;&gt;The tragedy of DNS: naming things, but with cache invalidation&lt;/h2&gt;
&lt;p&gt;DNS is one of those services that sounds simple. It’s a mapping of names to
numbers, right? Yet it&amp;rsquo;s one of the more complicated things underlying the
modern internet. It predates the modern internet, but let&amp;rsquo;s not get into that
today.&lt;/p&gt;

    
    

&lt;figure class=&#34;image-wide&#34;&gt;
        &lt;img src=&#34;https://tailscale.com/blog/magicdns-why-name/DNS.svg&#34; alt=&#34;Basic DNS&#34; /&gt;
    
    &lt;figcaption&gt;
        &lt;p&gt;A diagram explaining how DNS works. The laptop asks the DNS server what the IP address for tailscale.com is and gets back 82.58.46.8.&lt;/p&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;



&lt;div class=&#34;p-4 flex space-x-4&#34;&gt;
    &lt;div class=&#34;w-16 h-16 shrink-0 rounded-full overflow-hidden bg-gray-100 flex items-center justify-center self-center&#34;&gt;
        &lt;img class=&#34;object-cover object-center&#34; src=&#34;./xe.png&#34; alt=&#34;An image of Xe&#34; /&gt;
    &lt;/div&gt;
    &lt;div class=&#34;self-center min-w-0&#34;&gt;&amp;lt;&lt;b&gt;Xe&lt;/b&gt;&amp;gt; If you want to learn more about how DNS lookups work in a more visual way, see
&lt;a href=&#34;https://www.pingdom.com/blog/a-visual-explanation-of-how-dns-lookups-work/&#34;&gt;this
explanation&lt;/a&gt;
by Pingdom. The important takeaway is it&amp;rsquo;s complicated, and there are many
separate delegation steps, which we&amp;rsquo;ll discuss more below.&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;We can think of DNS as the first globally distributed database. DNS is designed
to be globally convergent (read: Over time the entire system will agree what
names point to what IP addresses), so that looking up &lt;code&gt;google.com&lt;/code&gt; will always
point to the same IP address regardless of whether the request originates in
Ottawa, San Francisco, Seattle, or Palau.&lt;/p&gt;


&lt;div class=&#34;p-4 flex space-x-4&#34;&gt;
    &lt;div class=&#34;w-16 h-16 shrink-0 rounded-full overflow-hidden bg-gray-100 flex items-center justify-center self-center&#34;&gt;
        &lt;img class=&#34;object-cover object-center&#34; src=&#34;./avery.png&#34; alt=&#34;An image of Avery&#34; /&gt;
    &lt;/div&gt;
    &lt;div class=&#34;self-center min-w-0&#34;&gt;&amp;lt;&lt;b&gt;Avery&lt;/b&gt;&amp;gt; Okay, actually google.com is probably one of the worst examples on the internet,
since they play so many anycast and DNS tricks that you never quite know what IP
address you&amp;rsquo;re going to get. But for our purposes, let&amp;rsquo;s imagine that Google
uses DNS like normal people do.&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;DNS is &lt;em&gt;globally convergent&lt;/em&gt; because over time, as caches expire, every DNS
server on the internet can eventually agree on the same answers to the same
queries. Every DNS record has a time-to-live (TTL) setting that specifies how
long the answer is valid. Unfortunately, DNS clients and servers may choose to
ignore the suggested time-to-live value and use their own time-to-live instead.
Some ISPs claim to do this in an effort to &amp;ldquo;reduce network traffic,&amp;rdquo; but
violating the DNS RFC like this ends up creating subtle problems that are very
hard to debug.&lt;/p&gt;


&lt;div class=&#34;p-4 flex space-x-4&#34;&gt;
    &lt;div class=&#34;w-16 h-16 shrink-0 rounded-full overflow-hidden bg-gray-100 flex items-center justify-center self-center&#34;&gt;
        &lt;img class=&#34;object-cover object-center&#34; src=&#34;./avery.png&#34; alt=&#34;An image of Avery&#34; /&gt;
    &lt;/div&gt;
    &lt;div class=&#34;self-center min-w-0&#34;&gt;&amp;lt;&lt;b&gt;Avery&lt;/b&gt;&amp;gt; By the way, any kind of polling-based (as opposed to push-based) cache with
static time periods will always have this problem: What cache timeout should you
choose? If you make it too short, you add query latency and overload servers. If
you make it too long, changes take ages (sometimes hours or days!) to propagate.
That&amp;rsquo;s why intermediaries jump in and try to &amp;ldquo;fix&amp;rdquo; the problem by messing with
the TTLs. But they always just end up creating different problems.&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;This model of one name to one set of IP addresses worked fine when the internet
was only one continent large, and didn&amp;rsquo;t get rewired very often. But it fails
when you have servers all over the world and you want users to be directed to
the nearest one, or to ignore regions that happen to be down right now. So
operators have pulled DNS servers into their load balancing infrastructure,
pointing users to the closest application servers rather than any kind of One
True Right Answer.&lt;/p&gt;

    
    

&lt;figure class=&#34;image-wide&#34;&gt;
        &lt;img src=&#34;https://tailscale.com/blog/magicdns-why-name/geolocated.svg&#34; alt=&#34;DNS servers provide sometimes provide a different IP address depending on your location&#34; /&gt;
    
    &lt;figcaption&gt;
        &lt;p&gt;A DNS server providing different answers for two laptops physically located in different areas of the planet. One laptop gets one answer, the other gets another.&lt;/p&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;That sometimes causes problems with overzealous caching resolvers set up by your
ISP that gives you routers without the ability to use a resolver that actually
follows the specification, or when you use a DNS server hosted elsewhere that
doesn&amp;rsquo;t get the best localized answer from the load balancer. But overall it
works out more often than not.&lt;/p&gt;


&lt;div class=&#34;p-4 flex space-x-4&#34;&gt;
    &lt;div class=&#34;w-16 h-16 shrink-0 rounded-full overflow-hidden bg-gray-100 flex items-center justify-center self-center&#34;&gt;
        &lt;img class=&#34;object-cover object-center&#34; src=&#34;./xe.png&#34; alt=&#34;An image of Xe&#34; /&gt;
    &lt;/div&gt;
    &lt;div class=&#34;self-center min-w-0&#34;&gt;&amp;lt;&lt;b&gt;Xe&lt;/b&gt;&amp;gt; Of course this is assuming that your government, ISP, or local cafe WiFi skiddie
isn&amp;rsquo;t hijacking DNS and up to no good.&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;As a society, we gave up the rule that every DNS name always maps to the same IP
address everywhere in the world. In practice this mostly doesn&amp;rsquo;t hurt us, except
when we&amp;rsquo;re trying to debug it. Then it can be either easy or very hard and make
you want to reconsider your career aspirations and wonder how much it would cost
to get into farming. Cows are &lt;a href=&#34;https://economicdashboard.alberta.ca/livestockprices&#34;&gt;surprisingly
expensive&lt;/a&gt;!&lt;/p&gt;


&lt;div class=&#34;p-4 flex space-x-4&#34;&gt;
    &lt;div class=&#34;w-16 h-16 shrink-0 rounded-full overflow-hidden bg-gray-100 flex items-center justify-center self-center&#34;&gt;
        &lt;img class=&#34;object-cover object-center&#34; src=&#34;./xe.png&#34; alt=&#34;An image of Xe&#34; /&gt;
    &lt;/div&gt;
    &lt;div class=&#34;self-center min-w-0&#34;&gt;&amp;lt;&lt;b&gt;Xe&lt;/b&gt;&amp;gt; It is a common misconception to call the way that DNS changes are observed by
people around the world &amp;ldquo;propagation.&amp;rdquo; This is technically incorrect. Most of
what you are waiting for is caches to expire and then for your next request to
get forwarded to upstream DNS servers to have accurate information. This is why
people call DNS &amp;ldquo;globally convergent&amp;rdquo;: Over time the entire internet will
gradually converge on a set of answers for what names point to which IP
addresses. However, in practice — considering how the data actually moves around
the internet — it&amp;rsquo;s not entirely wrong to say that the DNS queries have the
effect of propagating out from the origin DNS server. It&amp;rsquo;s all a matter of
perspective.&lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;dns-encryption-it-isnt&#34;&gt;DNS encryption (it isn&amp;rsquo;t)&lt;/h2&gt;
&lt;p&gt;DNS is an unencrypted, unauthenticated protocol. Queries and responses are sent
over plain text on the internet. This means that whoever and whatever can get an
IP address just by sending the right name.&lt;/p&gt;


&lt;div class=&#34;p-4 flex space-x-4&#34;&gt;
    &lt;div class=&#34;w-16 h-16 shrink-0 rounded-full overflow-hidden bg-gray-100 flex items-center justify-center self-center&#34;&gt;
        &lt;img class=&#34;object-cover object-center&#34; src=&#34;./xe.png&#34; alt=&#34;An image of Xe&#34; /&gt;
    &lt;/div&gt;
    &lt;div class=&#34;self-center min-w-0&#34;&gt;&amp;lt;&lt;b&gt;Xe&lt;/b&gt;&amp;gt; The privacy risks of publishing your private hostnames in public DNS can be
minimized by setting up private DNS servers — often called &amp;ldquo;split horizon&amp;rdquo; DNS —
that have a different set of domain name responses than the public internet. You
can wire those through your VPN (such as via the Tailscale admin console in the
DNS section), but then you lose out on the global convergence and caching
features of DNS. In many cases, you can get by with returning private IP ranges
in public DNS servers, but it depends on your level of paranoia. And sometimes
public DNS servers &lt;a href=&#34;https://en.wikipedia.org/wiki/DNS_rebinding&#34;&gt;helpfully reject private IP ranges as a security
feature&lt;/a&gt;, yay.&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Because there is no encryption or signing of DNS replies, you are also never
quite sure if the DNS response you got has been tampered with in-flight. An
attacker could easily sniff the wires and race back a packet that points
&lt;code&gt;google.com&lt;/code&gt; to the IP address of &lt;code&gt;badgooglephish.com&lt;/code&gt;. Your iPhone would be
none the wiser. There is a set of extensions called
&lt;a href=&#34;https://www.cloudflare.com/en-ca/dns/dnssec/how-dnssec-works/&#34;&gt;DNSSEC&lt;/a&gt; that
tries to fix a lot of these problems using fun cryptography that I’m nowhere
near qualified to explain, but this is where the warts really reveal themselves.
Slack recently had &lt;a href=&#34;https://slack.engineering/what-happened-during-slacks-dnssec-rollout/&#34;&gt;a pretty terrible production
outage&lt;/a&gt;
that was wholly traceable to trying to enable DNSSEC support, apparently for
FedRAMP compliance reasons.&lt;/p&gt;

    
    

&lt;figure class=&#34;image-wide&#34;&gt;
        &lt;img src=&#34;https://tailscale.com/blog/magicdns-why-name/hijacking.svg&#34; alt=&#34;A DNS server being hijacked. Bob&amp;#39;s laptop normally gets to the DNS server directly, but if the DNS packets are hijacked an attacker could send an intentionally wrong result to his laptop. This can be bad.&#34; /&gt;
    
    &lt;figcaption&gt;
        &lt;p&gt;A DNS server being hijacked, showing that the hijacker can mess with DNS results.&lt;/p&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;



&lt;div class=&#34;p-4 flex space-x-4&#34;&gt;
    &lt;div class=&#34;w-16 h-16 shrink-0 rounded-full overflow-hidden bg-gray-100 flex items-center justify-center self-center&#34;&gt;
        &lt;img class=&#34;object-cover object-center&#34; src=&#34;./avery.png&#34; alt=&#34;An image of Avery&#34; /&gt;
    &lt;/div&gt;
    &lt;div class=&#34;self-center min-w-0&#34;&gt;&amp;lt;&lt;b&gt;Avery&lt;/b&gt;&amp;gt; DNSSEC is not as good as it sounds. &lt;a href=&#34;https://twitter.com/tqbf&#34;&gt;@tqbf&lt;/a&gt; has a
detailed rant called &lt;a href=&#34;https://sockpuppet.org/blog/2015/01/15/against-dnssec/&#34;&gt;Against
DNSSEC&lt;/a&gt; that
systematically refutes every reason you might have for using DNSSEC. Except
FedRAMP, I guess.&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;DNSSEC doesn&amp;rsquo;t look like it will ever be widespread. So in that vacuum, there
are some new protocols that at least carry (part of) DNS over an encrypted
channel. But as part of that process, your machine typically creates an HTTPS
session to Google, Cloudflare, or whomever else. That intermediary will be able
to see (and, in theory, be able to tamper with) the DNS requests and responses
in plain text. Depending on your threat profile, that may not solve all your
security and privacy concerns.&lt;/p&gt;


&lt;div class=&#34;p-4 flex space-x-4&#34;&gt;
    &lt;div class=&#34;w-16 h-16 shrink-0 rounded-full overflow-hidden bg-gray-100 flex items-center justify-center self-center&#34;&gt;
        &lt;img class=&#34;object-cover object-center&#34; src=&#34;./xe.png&#34; alt=&#34;An image of Xe&#34; /&gt;
    &lt;/div&gt;
    &lt;div class=&#34;self-center min-w-0&#34;&gt;&amp;lt;&lt;b&gt;Xe&lt;/b&gt;&amp;gt; There are new projects like &lt;a href=&#34;https://www.gnunet.org/en/gns.html&#34;&gt;GNS&lt;/a&gt; that
enable end-to-end request privacy, but they have other disadvantages and aren&amp;rsquo;t
very widely deployed. It&amp;rsquo;s great for the people who use it, but most people
don&amp;rsquo;t use it.&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;So in normal deployments, DNS has no in-flight encryption, veracity, or
authentication mechanisms. This also means that there’s no way to tell if a
client is authorized to access a given DNS record or not. There is no native way
to establish an identity associated with a DNS request. This means that updating
DNS records (for example, for &lt;a href=&#34;https://en.wikipedia.org/wiki/Dynamic_DNS&#34;&gt;dynamic
DNS&lt;/a&gt;) can’t be done over DNS itself
and instead has to be delegated to some kind of third party, which then uses a
not-standardized API. There are no good APIs to automate DNS modification; there
are only APIs we tolerate because we have no other choice.&lt;/p&gt;


&lt;div class=&#34;p-4 flex space-x-4&#34;&gt;
    &lt;div class=&#34;w-16 h-16 shrink-0 rounded-full overflow-hidden bg-gray-100 flex items-center justify-center self-center&#34;&gt;
        &lt;img class=&#34;object-cover object-center&#34; src=&#34;./xe.png&#34; alt=&#34;An image of Xe&#34; /&gt;
    &lt;/div&gt;
    &lt;div class=&#34;self-center min-w-0&#34;&gt;&amp;lt;&lt;b&gt;Xe&lt;/b&gt;&amp;gt; There are things like &lt;a href=&#34;https://sssd.io/design-pages/active_directory_dns_updates.html&#34;&gt;DNS UPDATE
requests&lt;/a&gt; which
do allow you to update DNS records over DNS, but at this point, this is used
almost exclusively in Active Directory with Windows deployments. It also does
not fix the problems with authentication credentials being sent in plain text,
so this is only really usable from within a private corporate network. It&amp;rsquo;s not
a generally usable building block for the internet.&lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;delegation-can-be-dangerous&#34;&gt;Delegation (can be dangerous)&lt;/h2&gt;
&lt;p&gt;When you register a domain name with a registrar, they create a record that lets
them delegate responsibility for your domain to some other name server under the
authority of a top level domain such as &lt;code&gt;.com&lt;/code&gt;. (This is just how domain
registration and lookups work.) You could then delegate responsibility for a
subset of that domain name to another third party, who themselves would need to
set it up with their registrar. For example, you register your website
&lt;code&gt;example.com&lt;/code&gt; with your DNS registrar, and they delegate it to the &lt;code&gt;.com&lt;/code&gt;
registrar. But, you want to delegate control over a subset of your domain, say
&lt;code&gt;cdn.example.com&lt;/code&gt;, back to your CDN vendor so they can make whatever changes
they need as soon as possible without having to involve you. Then
&lt;code&gt;cdn.example.com&lt;/code&gt; will have its own DNS record.&lt;/p&gt;

    
    

&lt;figure class=&#34;image-wide&#34;&gt;
        &lt;img src=&#34;https://tailscale.com/blog/magicdns-why-name/delegation.svg&#34; alt=&#34;Alice&amp;#39;s laptop asking for the domain tailscale.com and being told to look elsewhere for it. Alice&amp;#39;s laptop gets the correct IP address after consulting the second DNS server.&#34; /&gt;
    
    &lt;figcaption&gt;
        &lt;p&gt;DNS delegation in action. These round-trips are measured in tens to hundreds of milliseconds. Imagine how this can add up.&lt;/p&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Most people reading this have probably never heard of delegating sub-subdomains
like this, because in practice it&amp;rsquo;s so complicated and fragile that it’s rarely
done unless DNS is a core competency of both parties involved. When big
companies do farm out a domain to another company, they usually use an entirely
separate top level domain name such as &lt;code&gt;googleusercontent.com&lt;/code&gt; or similar,
partly to reduce confusion. This also helps prevent reputational damage if
something at a partner company gets breached and leads to some random person
using a subdomain of &lt;code&gt;facebook.com&lt;/code&gt; to send out astronomical amounts of spam.&lt;/p&gt;


&lt;div class=&#34;p-4 flex space-x-4&#34;&gt;
    &lt;div class=&#34;w-16 h-16 shrink-0 rounded-full overflow-hidden bg-gray-100 flex items-center justify-center self-center&#34;&gt;
        &lt;img class=&#34;object-cover object-center&#34; src=&#34;./avery.png&#34; alt=&#34;An image of Avery&#34; /&gt;
    &lt;/div&gt;
    &lt;div class=&#34;self-center min-w-0&#34;&gt;&amp;lt;&lt;b&gt;Avery&lt;/b&gt;&amp;gt; Sub-subdomains have also gone out of fashion because of accidental sharing of
HTTP cookies between trusted parent and untrusted subdomains. Plus, every level
of subdomain delegation in DNS incurs an extra network round trip to do the
recursive name resolution, which increases latency. It ends up being more
trouble than it&amp;rsquo;s worth.&lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;reverse-dns-is-another-whole-dns&#34;&gt;Reverse DNS (is another whole DNS)&lt;/h2&gt;
&lt;p&gt;Then comes the fun with reverse DNS. Reverse DNS translates from IP address back
into a domain name. In email, reverse DNS is still used as part of risk
assessment for spam filtering, because most well-configured email servers have
the forward DNS name match the reverse DNS name. This is also a large part of
how internet service operators can tell whether IP addresses are residential
addresses or not.&lt;/p&gt;


&lt;div class=&#34;p-4 flex space-x-4&#34;&gt;
    &lt;div class=&#34;w-16 h-16 shrink-0 rounded-full overflow-hidden bg-gray-100 flex items-center justify-center self-center&#34;&gt;
        &lt;img class=&#34;object-cover object-center&#34; src=&#34;./avery.png&#34; alt=&#34;An image of Avery&#34; /&gt;
    &lt;/div&gt;
    &lt;div class=&#34;self-center min-w-0&#34;&gt;&amp;lt;&lt;b&gt;Avery&lt;/b&gt;&amp;gt; Don&amp;rsquo;t forget about rlogin, the predecessor to SSH! And &lt;a href=&#34;https://en.wikipedia.org/wiki/TCP_Wrappers&#34;&gt;TCP
Wrappers&lt;/a&gt;. In the olden days, we
used to accept or reject connections based purely on the answer from
(unencrypted of course) reverse DNS. We also used to think that &lt;a href=&#34;https://www.staldal.nu/tech/2007/10/31/why-can-only-root-listen-to-ports-below-1024/&#34;&gt;binding to
ports less than 1024 was more
secure&lt;/a&gt;.
Network security has come a long way!&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;It used to be that every company had a whole IPv4 subnet delegated to them, so
they also owned their own reverse DNS domain. When the Internet Fairy gave your
company an IP address block, it fell into one of three classes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Class A: a &lt;code&gt;/8&lt;/code&gt; network with 16 million addresses&lt;/li&gt;
&lt;li&gt;Class B: a &lt;code&gt;/16&lt;/code&gt; network with 65 thousand addresses&lt;/li&gt;
&lt;li&gt;Class C: a &lt;code&gt;/24&lt;/code&gt; network with 256 addresses&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These classes are not used anymore, but you can see the vestigial remains of them
in the way reverse DNS is implemented.&lt;/p&gt;
&lt;p&gt;IPv4 addresses are 32 bit numbers that are commonly written as a series of
eight-bit numbers separated by full stops. Consider this address:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;82.58.46.8
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This used to denote a strict hierarchy from the root of the internet to the
owner of the &lt;code&gt;82.0.0.0/8&lt;/code&gt; block, the owner of the &lt;code&gt;82.58.0.0/16&lt;/code&gt; block, and
finally the owner of the &lt;code&gt;82.58.46.0/24&lt;/code&gt; block. This same hierarchy is used with
DNS delegation to distribute the ownership of reverse DNS names. In order to
delegate this out, you have to reverse the IP address like this:&lt;/p&gt;

    
    

&lt;figure class=&#34;image-wide&#34;&gt;
        &lt;img src=&#34;https://tailscale.com/blog/magicdns-why-name/reverse-dns-ip.svg&#34; alt=&#34;Reverse DNS reverses each octet of an IP address to construct a DNS name. 1.2.3.4 becomes 4.3.2.1&#34; /&gt;
    
    &lt;figcaption&gt;
        &lt;p&gt;Reverse DNS reversing the order of the octets of an IP address.&lt;/p&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;This is the core of how reverse DNS lookups work and why we&amp;rsquo;re calling it
another whole DNS. It&amp;rsquo;s the same semantics as DNS, but backwards. It&amp;rsquo;s a lot of
fun to implement.&lt;/p&gt;


&lt;div class=&#34;p-4 flex space-x-4&#34;&gt;
    &lt;div class=&#34;w-16 h-16 shrink-0 rounded-full overflow-hidden bg-gray-100 flex items-center justify-center self-center&#34;&gt;
        &lt;img class=&#34;object-cover object-center&#34; src=&#34;./xe.png&#34; alt=&#34;An image of Xe&#34; /&gt;
    &lt;/div&gt;
    &lt;div class=&#34;self-center min-w-0&#34;&gt;&amp;lt;&lt;b&gt;Xe&lt;/b&gt;&amp;gt; &lt;p&gt;Tailscale &lt;em&gt;does&lt;/em&gt; implement reverse DNS lookups in MagicDNS. However, Tailscale
doesn&amp;rsquo;t use one of those old classful addresses. We use &lt;code&gt;100.64.0.0/10&lt;/code&gt;, which
is two bits smaller than a &lt;code&gt;/8&lt;/code&gt;. This conflicts with the ways subnet delegation
works because it only does 8-bit jumps. To work around this, we set a bunch of
reverse DNS routes. You can see them by running &lt;code&gt;resolvectl&lt;/code&gt; on a machine
running Tailscale and systemd or &lt;code&gt;scutil --dns&lt;/code&gt; on a Mac running Tailscale.
Here&amp;rsquo;s the output of my developer machine:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;DNS Domain: 
telethia-pirhanax.ts.net example.com.beta.tailscale.net
~0.e.1.a.c.5.1.1.a.7.d.f.ip6.arpa ~100.100.in-addr.arpa ~101.100.in-addr.arpa ~102.100.in-addr.arpa
~103.100.in-addr.arpa ~104.100.in-addr.arpa ~105.100.in-addr.arpa ~106.100.in-addr.arpa
~107.100.in-addr.arpa ~108.100.in-addr.arpa ~109.100.in-addr.arpa ~110.100.in-addr.arpa
~111.100.in-addr.arpa ~112.100.in-addr.arpa ~113.100.in-addr.arpa ~114.100.in-addr.arpa
~115.100.in-addr.arpa ~116.100.in-addr.arpa ~117.100.in-addr.arpa ~118.100.in-addr.arpa
~119.100.in-addr.arpa ~120.100.in-addr.arpa ~121.100.in-addr.arpa ~122.100.in-addr.arpa
~123.100.in-addr.arpa ~124.100.in-addr.arpa ~125.100.in-addr.arpa ~126.100.in-addr.arpa
~127.100.in-addr.arpa ~64.100.in-addr.arpa ~65.100.in-addr.arpa ~66.100.in-addr.arpa
~67.100.in-addr.arpa ~68.100.in-addr.arpa ~69.100.in-addr.arpa ~70.100.in-addr.arpa
~71.100.in-addr.arpa ~72.100.in-addr.arpa ~73.100.in-addr.arpa ~74.100.in-addr.arpa
~75.100.in-addr.arpa ~76.100.in-addr.arpa ~77.100.in-addr.arpa ~78.100.in-addr.arpa
~79.100.in-addr.arpa ~80.100.in-addr.arpa ~81.100.in-addr.arpa ~82.100.in-addr.arpa
~83.100.in-addr.arpa ~84.100.in-addr.arpa ~85.100.in-addr.arpa ~86.100.in-addr.arpa
~87.100.in-addr.arpa ~88.100.in-addr.arpa ~89.100.in-addr.arpa ~90.100.in-addr.arpa
~91.100.in-addr.arpa ~92.100.in-addr.arpa ~93.100.in-addr.arpa ~94.100.in-addr.arpa
~95.100.in-addr.arpa ~96.100.in-addr.arpa ~97.100.in-addr.arpa ~98.100.in-addr.arpa
~99.100.in-addr.arpa
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;But nowadays, with IP addresses
being scarce and frequently reallocated, the reverse DNS domain for a set of IPs
is usually owned by your cloud provider, not you. So providing &amp;ldquo;correct&amp;rdquo; reverse
DNS answers requires a lot of coordination that many people do not want to
bother with.&lt;/p&gt;


&lt;div class=&#34;p-4 flex space-x-4&#34;&gt;
    &lt;div class=&#34;w-16 h-16 shrink-0 rounded-full overflow-hidden bg-gray-100 flex items-center justify-center self-center&#34;&gt;
        &lt;img class=&#34;object-cover object-center&#34; src=&#34;./avery.png&#34; alt=&#34;An image of Avery&#34; /&gt;
    &lt;/div&gt;
    &lt;div class=&#34;self-center min-w-0&#34;&gt;&amp;lt;&lt;b&gt;Avery&lt;/b&gt;&amp;gt; And don&amp;rsquo;t forget, with the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Host&#34;&gt;HTTP Host:
header&lt;/a&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/Server_Name_Indication&#34;&gt;TLS
SNI&lt;/a&gt;, a single IP address
can have many names! With forward DNS that&amp;rsquo;s no problem: You just set up
multiple DNS names that translate to the same IP. But with reverse DNS, every IP
can only translate back to a single name. It doesn&amp;rsquo;t work well on the modern
internet.&lt;/div&gt;
&lt;/div&gt;



&lt;div class=&#34;p-4 flex space-x-4&#34;&gt;
    &lt;div class=&#34;w-16 h-16 shrink-0 rounded-full overflow-hidden bg-gray-100 flex items-center justify-center self-center&#34;&gt;
        &lt;img class=&#34;object-cover object-center&#34; src=&#34;./xe.png&#34; alt=&#34;An image of Xe&#34; /&gt;
    &lt;/div&gt;
    &lt;div class=&#34;self-center min-w-0&#34;&gt;&amp;lt;&lt;b&gt;Xe&lt;/b&gt;&amp;gt; There were a sizable number of people who would go through all that pain to have
an amusing reverse DNS name visible on IRC to show up as something like
&lt;code&gt;gimme-your.nickserv.pw&lt;/code&gt; or something else equally amusing. This is a dying art
form as IRC slowly fades from public consciousness.&lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;its-always-dns&#34;&gt;It&amp;rsquo;s always DNS&lt;/h2&gt;
&lt;p&gt;All of this doesn’t even begin to cover DNS client configuration on every device
and OS. DNS client configuration is unique for every platform and can range from
trivial to Sisyphean, &lt;a href=&#34;https://tailscale.com/blog/sisyphean-dns-client-linux/&#34;&gt;depending on which platform you use and how many people
have had opinions about how this should be configured in the
past&lt;/a&gt;.
Most of the time you hopefully don’t have to care about it. The next big bucket
is when you do have to care, and there’s an OS native API for it. The last
bucket is when you have to dynamically figure out what is going on with the OS
on the fly and then piece everything together to make things Just Work™️ like
people expect it to.&lt;/p&gt;
&lt;p&gt;All of this madness is why, when you see a big website go down, it&amp;rsquo;s often
because &lt;em&gt;everything&lt;/em&gt; is down because the DNS servers fell over again. When your
private internal network is acting weird or slow, it&amp;rsquo;s often a local DNS failure
(or old cached values, or mismatched DNS configuration between nodes, or tidal
forces affecting undersea fiber optic cables due to the literal phase of the
moon).&lt;/p&gt;
&lt;p&gt;DNS has led to many memes, artistic creations, and philosophical documents about
the nature of downtime, such as the following:&lt;/p&gt;

    
    

&lt;figure class=&#34;image-wide&#34;&gt;
        &lt;img src=&#34;https://tailscale.com/blog/magicdns-why-name/image1.jpg&#34; alt=&#34;Cherry blossoms on parchment with the inscription &amp;#39;It&amp;#39;s not DNS, there&amp;#39;s no way it was DNS, it was DNS&amp;#39; credited to SSBroski&#34; /&gt;
    
&lt;/figure&gt;

&lt;h2 id=&#34;magicdns-is-dns-but-different&#34;&gt;MagicDNS is DNS, but different&lt;/h2&gt;
&lt;p&gt;MagicDNS uses DNS as its query protocol, so you might think it would have all
the same flaws. But in MagicDNS, the equation is totally flipped.&lt;/p&gt;
&lt;p&gt;In Tailscale, the coordination service has a list of everything on your tailnet.
You have end-to-end encryption, so you can generally trust that a machine owned
by a person is actually being used by that person, and packets coming from that
machine are related to that person. You only have access to machines that you
have permission to see with Tailscale&amp;rsquo;s cryptographically enforced ACLs. User
authentication is done by your identity provider, which prevents entire classes
of attacks. All that together makes the network layer secure —&lt;/p&gt;


&lt;div class=&#34;p-4 flex space-x-4&#34;&gt;
    &lt;div class=&#34;w-16 h-16 shrink-0 rounded-full overflow-hidden bg-gray-100 flex items-center justify-center self-center&#34;&gt;
        &lt;img class=&#34;object-cover object-center&#34; src=&#34;./avery.png&#34; alt=&#34;An image of Avery&#34; /&gt;
    &lt;/div&gt;
    &lt;div class=&#34;self-center min-w-0&#34;&gt;&amp;lt;&lt;b&gt;Avery&lt;/b&gt;&amp;gt; …like we used to pretend it was back in the days of rlogin and TCP Wrappers!&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;— yes, like in the old days. But then, once the network is secure, we can build
more cool mechanisms on top.&lt;/p&gt;
&lt;p&gt;MagicDNS sets up a relatively rare feature of DNS client configuration called
&lt;a href=&#34;https://superuser.com/a/184366&#34;&gt;search domains&lt;/a&gt;. This allows you to connect to
individual machines in your tailnet by simple hostname instead of by IP address
or fully qualified domain name. If your main staging server is named &lt;code&gt;pandoria&lt;/code&gt;,
you can connect to &lt;code&gt;pandoria&lt;/code&gt; directly instead of to the fully qualified domain
name &lt;code&gt;pandoria.example.com.beta.tailscale.net&lt;/code&gt; (or if you have &lt;a href=&#34;https://tailscale.com/kb/1153/enabling-https/&#34;&gt;HTTPS
configured&lt;/a&gt;,
&lt;code&gt;pandoria.telethia-pirhanax.ts.net&lt;/code&gt;). This makes it easier to connect to
machines you care about without all that extra typing. You don’t need to set up
SSH aliases, you just &lt;code&gt;ssh pandoria&lt;/code&gt; and you’re in.&lt;/p&gt;
&lt;p&gt;MagicDNS automatically uses a device&amp;rsquo;s &lt;a href=&#34;https://tailscale.com/kb/1098/machine-names&#34;&gt;machine name&lt;/a&gt; as
part of the DNS entry. If you change your device’s name, the MagicDNS entry will
automatically change. If you have a specific name you’d like to use to reference
your device, then you can &lt;a href=&#34;https://tailscale.com/kb/1098/machine-names/#renaming-a-machine&#34;&gt;edit the machine
name&lt;/a&gt;.&lt;/p&gt;

    
    

&lt;figure class=&#34;image-wide&#34;&gt;
        &lt;img src=&#34;https://tailscale.com/blog/magicdns-why-name/new-device.svg&#34; alt=&#34;Adding a new device to your Tailnet&#34; /&gt;
    
    &lt;figcaption&gt;
        &lt;p&gt;MagicDNS is fed by Tailscale&amp;rsquo;s control server, so the requests never need to leave your machine.&lt;/p&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&#34;every-machine-is-its-own-dns-server&#34;&gt;Every machine is its own DNS server&lt;/h3&gt;
&lt;p&gt;One of the big reliability downsides of classic DNS is that if a DNS server goes
down, clients can’t look up hosts on that DNS server anymore, unless the names
are cached. Then, when the caches expire, everything runs into even more issues.
This turns small outages into big ones that get you on the front page of CNN and
Reddit.&lt;/p&gt;
&lt;p&gt;MagicDNS fixes this by running the MagicDNS server locally, on every machine on
your tailnet, at the virtual address &lt;code&gt;100.100.100.100&lt;/code&gt;. The DNS server can’t go
down. It can’t fall over from load (unless your own machine also does), and when
your machine does fall over for some reason every other machine is unaffected.&lt;/p&gt;
&lt;p&gt;Because MagicDNS always runs locally, you don’t even need to trust end-to-end
encryption: MagicDNS traffic never leaves your machine. It’s a virtual service
on a virtual network.&lt;/p&gt;

    
    

&lt;figure class=&#34;image-wide&#34;&gt;
        &lt;img src=&#34;https://tailscale.com/blog/magicdns-why-name/search-domains.svg&#34; alt=&#34;Laptop communicating with the MagicDNS virtual service&#34; /&gt;
    
    &lt;figcaption&gt;
        &lt;p&gt;If your browser asks for pandoria without a top level domain attached, the OS could try any number of these domains in order to get something working.&lt;/p&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;



&lt;div class=&#34;p-4 flex space-x-4&#34;&gt;
    &lt;div class=&#34;w-16 h-16 shrink-0 rounded-full overflow-hidden bg-gray-100 flex items-center justify-center self-center&#34;&gt;
        &lt;img class=&#34;object-cover object-center&#34; src=&#34;./xe.png&#34; alt=&#34;An image of Xe&#34; /&gt;
    &lt;/div&gt;
    &lt;div class=&#34;self-center min-w-0&#34;&gt;&amp;lt;&lt;b&gt;Xe&lt;/b&gt;&amp;gt; You don&amp;rsquo;t have to worry about the DNS server going down when the DNS server is
running on every machine in your network! If your device&amp;rsquo;s DNS is down, it&amp;rsquo;s
because your own device doesn’t work — and then you have bigger problems.
Hopefully not problems with fire. Fire is never good for computers.&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;MagicDNS uses delegation for Tailscale-specific DNS names, but all the
delegation happens internally on your own box, which means delegation latency is
effectively zero, and you can&amp;rsquo;t configure it wrong.&lt;/p&gt;
&lt;p&gt;MagicDNS never needs to worry about authorizing updates or tampering: Updates
come from a secure channel through the control plane.&lt;/p&gt;
&lt;p&gt;In MagicDNS, reverse DNS works by default, because every Tailscale machine gets
its own unique private IP, and MagicDNS handles the reverse DNS domain for that
subnet.&lt;/p&gt;
&lt;p&gt;MagicDNS doesn’t suffer from latency issues. The latency is as low as your
device allows for sending packets to localhost.&lt;/p&gt;

    
    

&lt;figure class=&#34;image-wide&#34;&gt;
        &lt;img src=&#34;https://tailscale.com/blog/magicdns-why-name/magicdns-vs-dns.svg&#34; alt=&#34;A diagram explaining that MagicDNS has all its records on-device, so it can return results in fractions of milliseconds instead of tens to hundreds of milliseconds&#34; /&gt;
    
    &lt;figcaption&gt;
        &lt;p&gt;MagicDNS records are always on your device, so you never need to wait for a DNS server to reply.&lt;/p&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&#34;transparently-upgrading-your-os-capabilities&#34;&gt;Transparently upgrading your OS&amp;rsquo; capabilities&lt;/h3&gt;
&lt;p&gt;Because Tailscale runs a local DNS server on every machine, MagicDNS can
normalize and upgrade the DNS capabilities of every machine on your tailnet.&lt;/p&gt;
&lt;p&gt;For example, MagicDNS can &lt;a href=&#34;https://tailscale.com/blog/2021-09-private-dns-with-magicdns/&#34;&gt;transparently upgrade as many DNS queries as possible
to DNS-over-HTTPS&lt;/a&gt; so that DNS
requests to the outside world can’t be tampered with or sniffed in-flight. This
doesn’t protect you against Google, Cloudflare, Quad9, or any other
DNS-over-HTTPS provider being technically capable of viewing every DNS
query you make, but it should protect your non-MagicDNS queries from your ISP or
a local script kiddie on a coffee shop WiFi network. And this works even if a
machine&amp;rsquo;s underlying OS is too old to support DNS-over-HTTPS, such as Windows 7.&lt;/p&gt;


&lt;div class=&#34;p-4 flex space-x-4&#34;&gt;
    &lt;div class=&#34;w-16 h-16 shrink-0 rounded-full overflow-hidden bg-gray-100 flex items-center justify-center self-center&#34;&gt;
        &lt;img class=&#34;object-cover object-center&#34; src=&#34;./xe.png&#34; alt=&#34;An image of Xe&#34; /&gt;
    &lt;/div&gt;
    &lt;div class=&#34;self-center min-w-0&#34;&gt;&amp;lt;&lt;b&gt;Xe&lt;/b&gt;&amp;gt; Yes, we do support Windows 7!&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;This local DNS server can also delegate subdomains if you create a &lt;a href=&#34;https://tailscale.com/kb/1054/dns/&#34;&gt;split
DNS&lt;/a&gt; route, even if your OS doesn&amp;rsquo;t support that natively. When
you &lt;a href=&#34;https://tailscale.com/kb/1054/dns&#34;&gt;configure split DNS&lt;/a&gt; in the admin console, these routes will
automatically be pushed out to all devices in your tailnet, and allow you to
route traffic as you want to any subdomains or virtual top-level domains. For
example, you can also use this to access AWS VPC domain names from your non-AWS
Tailscale nodes. Even on Windows 7.&lt;/p&gt;
&lt;h2 id=&#34;push-based-cache-invalidation&#34;&gt;Push-based cache invalidation&lt;/h2&gt;
&lt;p&gt;As the cherry on top, MagicDNS fixes the cache invalidation problem completely
because our control plane pushes updates immediately to every device, where DNS
would periodically poll for changes. And because it runs on your device
directly, we eliminate the possibility of middleboxes messing up the caching
parameters. This means you can trust your internal DNS to always be up to date
right now, and never have to worry about configuring another internal DNS TTL.&lt;/p&gt;


&lt;div class=&#34;p-4 flex space-x-4&#34;&gt;
    &lt;div class=&#34;w-16 h-16 shrink-0 rounded-full overflow-hidden bg-gray-100 flex items-center justify-center self-center&#34;&gt;
        &lt;img class=&#34;object-cover object-center&#34; src=&#34;./avery.png&#34; alt=&#34;An image of Avery&#34; /&gt;
    &lt;/div&gt;
    &lt;div class=&#34;self-center min-w-0&#34;&gt;&amp;lt;&lt;b&gt;Avery&lt;/b&gt;&amp;gt; It also means that MagicDNS can be used as a service discovery tool. Push your
code to a server named &lt;code&gt;git&lt;/code&gt;. Share text at &lt;code&gt;http://pastebin&lt;/code&gt;. There are entire
startups doing new service discovery mechanisms that are mainly working around
the limitations of DNS. We&amp;rsquo;ve been trained not to trust DNS for service
discovery, but it was never the DNS protocol that was the problem. It was
caching, latency, and polling.&lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;the-details-are-invisible&#34;&gt;The details are invisible&lt;/h2&gt;
&lt;p&gt;Some may be tempted to say things like, “Oh, this is just a dynamic DNS server.
I could implement this all in a weekend with at least half of the code these
chuckleheads wrote.” But without running the DNS server on every machine like
MagicDNS does, update latency becomes an issue again. Security and cache
invalidation become issues again. The uptime and load of the DNS server become
an issue. It becomes a point of failure, not a point of resilience.&lt;/p&gt;
&lt;p&gt;Regular DNS, over the decades, has evolved toward being a single point of
failure, even when you balance the load. We haven&amp;rsquo;t fixed the design flaws in
DNS for nearly 40 years, and we are not likely to fix those issues for the next
40 years, either. MagicDNS addresses the key issues in surprising depth, with
surprisingly little code.&lt;/p&gt;
&lt;p&gt;So that&amp;rsquo;s why we call it MagicDNS: Because without the magic, it’s not just DNS.
MagicDNS is built on totally different fundamentals that eliminate most of DNS&amp;rsquo;s
problems. Just like magic.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Making an SSH client the hard way</title>
      
      
      <link>https://tailscale.com/blog/ssh-console/</link>
      <pubDate>Thu, 27 Oct 2022 00:00:00 +0000</pubDate>
        <author>Mihai Parparita</author>
      <guid>https://tailscale.com/blog/ssh-console/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Today, we’re launching a web-based SSH client: Tailscale SSH Console.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;From the Tailscale admin console, admins will now see a little “SSH…” button to connect to devices running &lt;a href=&#34;https://tailscale.com/kb/1193/tailscale-ssh/&#34;&gt;Tailscale SSH&lt;/a&gt;. Click this, and you’ll pop open an SSH client, right in your browser. Tailscale SSH Console is now available in beta.&lt;/p&gt;

    
    

&lt;figure class=&#34;image-wide&#34;&gt;
        &lt;img src=&#34;https://tailscale.com/blog/ssh-console/ssh-console.gif&#34; alt=&#34;Animation of selecting a username to start a Tailscale SSH Console session.&#34; /&gt;
    
    &lt;figcaption&gt;
        &lt;p&gt;To start a Tailscale SSH Console session, click “SSH” on the device, select the username you want to connect as, and reauthenticate.&lt;/p&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Web-based SSH clients aren’t new. Nearly every VPS and cloud provider already lets you connect to your VMs from the web — so how is this different? With Tailscale SSH Console, your browser &lt;em&gt;becomes&lt;/em&gt; a Tailscale client, and joins your &lt;a href=&#34;https://tailscale.com/kb/1136/tailnet/&#34;&gt;tailnet&lt;/a&gt; in the same way as &lt;a href=&#34;https://tailscale.com/blog/how-tailscale-works/&#34;&gt;any other device that you run Tailscale on&lt;/a&gt;. To make this possible, we ported the following to &lt;a href=&#34;https://webassembly.org/&#34;&gt;WebAssembly&lt;/a&gt;: the Tailscale client, &lt;a href=&#34;https://www.wireguard.com/&#34;&gt;WireGuard®&lt;/a&gt;, a complete &lt;a href=&#34;https://gvisor.dev/docs/user_guide/networking/&#34;&gt;userspace network stack&lt;/a&gt; (from &lt;a href=&#34;https://gvisor.dev/&#34;&gt;gVisor&lt;/a&gt;), and an SSH client.&lt;/p&gt;
&lt;p&gt;When you click the “SSH…” button, we create an &lt;a href=&#34;https://tailscale.com/kb/1111/ephemeral-nodes/&#34;&gt;ephemeral&lt;/a&gt; &lt;a href=&#34;https://tailscale.com/kb/1085/auth-keys/&#34;&gt;auth key&lt;/a&gt; in the Tailscale coordination server, and then give that auth key to a Tailscale client loaded by your browser, which starts a node with that key. The client then creates an in-memory-only WireGuard keypair and starts to communicate with the Tailscale coordination server (to discover the rest of your tailnet) and &lt;a href=&#34;https://tailscale.com/blog/how-tailscale-works/#encrypted-tcp-relays-derp&#34;&gt;DERP relays&lt;/a&gt; (to be able to connect to other nodes). Like other clients that use DERP, the traffic that passes through the relays is encrypted and not visible to Tailscale.&lt;/p&gt;
&lt;p&gt;And because this uses Tailscale SSH, which authenticates each packet based on its &lt;a href=&#34;https://tailscale.com/kb/1193/tailscale-ssh/#how-does-it-work&#34;&gt;WireGuard cryptographic identity&lt;/a&gt;, we don’t need to ask you for a password, or have you upload a public key, or have you manage an &lt;code&gt;authorized_keys&lt;/code&gt; file. Just click “SSH…” &lt;em&gt;and you’re in&lt;/em&gt; 🪄.&lt;/p&gt;
&lt;h3 id=&#34;one-year-earlier&#34;&gt;One year earlier&lt;/h3&gt;
&lt;p&gt;Tailscale SSH Console started out as &lt;a href=&#34;https://twitter.com/bradfitz/status/1450916922288005122&#34;&gt;Brad’s vacation hack&lt;/a&gt; to see if &lt;a href=&#34;https://github.com/golang/go/wiki/WebAssembly&#34;&gt;Go’s WebAssembly support&lt;/a&gt; was good enough to allow the Tailscale client to be compiled for the browser. After some &lt;a href=&#34;https://github.com/tailscale/tailscale/pull/3155&#34;&gt;hacking&lt;/a&gt; &lt;a href=&#34;https://github.com/tailscale/tailscale/pull/3195&#34;&gt;and&lt;/a&gt; &lt;a href=&#34;https://github.com/tailscale/tailscale/pull/4709&#34;&gt;slashing&lt;/a&gt; to fix build errors (including changes &lt;a href=&#34;https://git.zx2c4.com/wireguard-go/commit/?id=82e0b734e5d28f96205de65fd2179e08fd91b1db&#34;&gt;to wireguard-go&lt;/a&gt;), we had a binary that would load in the browser — but it couldn’t connect to anything.&lt;/p&gt;

    
    

&lt;figure class=&#34;image-wide&#34;&gt;
        &lt;img src=&#34;https://tailscale.com/blog/ssh-console/ssh-console-architecture.png&#34; alt=&#34;Architecture diagram for Tailscale SSH Console. Key exchange uses the Tailscale coordination server, and SSH traffic goes through DERP relays.&#34; /&gt;
    
    &lt;figcaption&gt;
        &lt;p&gt;Tailscale SSH Console connects your browser to another node running Tailscale SSH.&lt;/p&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Tailscale tries really hard to establish connections, and if a direct path is not available, it will use &lt;a href=&#34;https://tailscale.com/blog/how-tailscale-works/#encrypted-tcp-relays-derp&#34;&gt;a DERP relay server&lt;/a&gt; to forward packets. However, a browser is an even more inhospitable environment than normal, and the DERP HTTP client &lt;a href=&#34;https://github.com/tailscale/tailscale/blob/7cf8ec8108f4e26092bf07f698c8c5ce70d27d13/derp/derphttp/derphttp_client.go#L231-L362&#34;&gt;reaching into connection internals&lt;/a&gt; was not compatible with the &lt;code&gt;&lt;a href=&#34;https://github.com/golang/go/blob/1f068f0dc7bc997446a7aac44cfc70746ad918e0/src/net/http/roundtrip_js.go&#34;&gt;fetch()-based HTTP transport&lt;/a&gt;&lt;/code&gt; that ends up being used by Go when targeting WebAssembly. Like all problems in computer science, it could be solved with a layer of indirection. We added WebSockets &lt;a href=&#34;https://github.com/tailscale/tailscale/pull/3165&#34;&gt;as another transport&lt;/a&gt; for DERP, and then wrapped a WebSocket connection into something that’s close enough to a &lt;code&gt;net.Conn&lt;/code&gt; for the rest of the DERP code to use with no modifications. We were lucky that the &lt;a href=&#34;https://github.com/nhooyr/websocket&#34;&gt;Go WebSockets library&lt;/a&gt; that we use (and &lt;a href=&#34;https://github.com/orgs/tailscale/sponsoring&#34;&gt;sponsor&lt;/a&gt;) already had &lt;a href=&#34;https://github.com/nhooyr/websocket/pull/142&#34;&gt;good WebAssembly support&lt;/a&gt;, and only needed &lt;a href=&#34;https://github.com/nhooyr/websocket/pull/350&#34;&gt;a small tweak&lt;/a&gt;. We would later use this same &lt;a href=&#34;https://github.com/tailscale/tailscale/pull/4781&#34;&gt;“tunnel it through WebSockets” approach&lt;/a&gt; for the &lt;a href=&#34;https://tailscale.com/blog/how-tailscale-works/#the-control-plane-key-exchange-and-coordination&#34;&gt;coordination server&lt;/a&gt; protocol.&lt;/p&gt;
&lt;p&gt;Though we had a working WebAssembly binary, it was rather…large. While this is &lt;a href=&#34;https://github.com/golang/go/wiki/WebAssembly#reducing-the-size-of-wasm-files&#34;&gt;unavoidable&lt;/a&gt; to some degree when building Go for WebAssembly, there was surely some low-hanging fruit. A friend had recently released &lt;a href=&#34;https://github.com/evmar/weave&#34;&gt;Weave&lt;/a&gt;, a &lt;code&gt;.wasm&lt;/code&gt; viewer, and we &lt;a href=&#34;https://github.com/evmar/weave/pull/5&#34;&gt;extended it with a tree view&lt;/a&gt; to make it easier to see which packages and files were contributing to the binary size the most. We found a few &lt;a href=&#34;https://github.com/tailscale/tailscale/pull/4802&#34;&gt;unnecessary&lt;/a&gt; &lt;a href=&#34;https://github.com/tailscale/tailscale/pull/4813&#34;&gt;dependencies&lt;/a&gt;, and together with &lt;a href=&#34;https://github.com/tailscale/tailscale/blob/9d04ffc7823dbd5fb18d5e5e9dea462846128969/cmd/tsconnect/common.go#L197-L207&#34;&gt;some build settings tweaks&lt;/a&gt; we were able to shave off a few megabytes. However, there’s still &lt;a href=&#34;https://github.com/tailscale/tailscale/issues/5142&#34;&gt;more work&lt;/a&gt; to be done here.&lt;/p&gt;
&lt;h2 id=&#34;building-a-product&#34;&gt;Building a product&lt;/h2&gt;
&lt;p&gt;Just being able to have a Tailscale client run in the browser is cool in and of itself, but there was still the question of “OK, but what would you use it for?”. This occurred while we were developing &lt;a href=&#34;https://tailscale.com/kb/1193/tailscale-ssh/&#34;&gt;Tailscale SSH&lt;/a&gt;, and we saw a natural application — using this new capability to create a secure, in-browser, SSH client. We could have a client that let you browse through the devices on your tailnet that were accessible to you, made use of the &lt;a href=&#34;https://tailscale.com/kb/1193/tailscale-ssh/#ensure-tailscale-ssh-is-permitted-in-acls&#34;&gt;policy to let you pick a username&lt;/a&gt; on the host, and integrated with &lt;a href=&#34;https://tailscale.com/kb/1193/tailscale-ssh/#configure-tailscale-ssh-with-check-mode&#34;&gt;check mode&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The most natural place for this SSH client would be Tailscale’s &lt;a href=&#34;https://login.tailscale.com/admin&#34;&gt;admin console&lt;/a&gt;, but that is part of the &lt;a href=&#34;https://tailscale.com/blog/opensource/#why-our-coordination-server-is-closed-source&#34;&gt;closed source coordination server&lt;/a&gt;. We liked the idea of the WebAssembly client being open source, but we needed a way to reuse it in our closed source repo. We ended up making &lt;a href=&#34;https://www.npmjs.com/package/@tailscale/connect&#34;&gt;an NPM package&lt;/a&gt; to allow this, which was a bit of a novelty in our Go-centric world. Though this package was developed for internal use, we want to support &lt;a href=&#34;https://leaningtech.com/webvm-virtual-machine-with-networking-via-tailscale/&#34;&gt;other interesting applications&lt;/a&gt; — so please &lt;a href=&#34;https://github.com/tailscale/tailscale/issues/new/choose&#34;&gt;get in touch&lt;/a&gt; if you have something in mind.&lt;/p&gt;
&lt;p&gt;Adding the ability to create SSH sessions from our admin console led to some interesting user experience discussions. Would these sessions be transient, just open for a few minutes to check on something, or longer affairs? Would the user want to have multiple sessions running concurrently? As we pondered adding tabs, and possibly making things draggable and minimizable, it became apparent that we were effectively creating &lt;a href=&#34;https://en.wikipedia.org/wiki/Greenspun%27s_tenth_rule&#34;&gt;a bug-ridden, informally-specified&lt;/a&gt; implementation of half a window manager.&lt;/p&gt;
&lt;p&gt;Rather than get into that business, we decided we should use real windows, and thus allow the user to have the same flexibility that they would with a real terminal. To make these windows fast, they are “child” windows that the main admin console opens and uses as rendering surfaces – all of the logic and state still remains in the parent window. This approach has good performance characteristics, but did require &lt;a href=&#34;https://github.com/xtermjs/xterm.js/pull/4069&#34;&gt;some&lt;/a&gt; &lt;a href=&#34;https://github.com/radix-ui/primitives/pull/1677&#34;&gt;changes&lt;/a&gt; to our frontend dependencies. To make it easier to iterate on these interface changes, we recreated &lt;a href=&#34;https://blog.persistent.info/2016/01/static-resource-grafting.html&#34;&gt;some tooling&lt;/a&gt; to allow us to use in-development code with our prod tailnet, so that we could try out more realistic scenarios.&lt;/p&gt;
&lt;figure&gt;
  &lt;iframe width=&#34;100%&#34; height=&#34;360&#34; src=&#34;https://www.youtube.com/embed/3PkjPiN06Rc&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
  &lt;figcaption&gt;Maya demonstrates how to use Tailscale SSH Console.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;To try out Tailscale SSH Console: first, &lt;a href=&#34;https://tailscale.com/kb/1193/tailscale-ssh/#configure-tailscale-ssh&#34;&gt;enable Tailscale SSH&lt;/a&gt; on the device you’re trying to connect to. Then, from the &lt;a href=&#34;https://login.tailscale.com/admin/machines&#34;&gt;machines tab&lt;/a&gt; of the admin console, select “SSH…” to connect to any machine that your access controls allow you to connect to. Re-authenticate, and you’re in. &lt;a href=&#34;https://tailscale.com/kb/1216/tailscale-ssh-console/&#34;&gt;See the documentation&lt;/a&gt; to learn more.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Get notifications for events on your tailnet with webhooks</title>
      
      
      <link>https://tailscale.com/blog/webhooks/</link>
      <pubDate>Wed, 26 Oct 2022 00:00:00 +0000</pubDate>
      <author>Laura Florea, Sonia Appasamy</author>
      <guid>https://tailscale.com/blog/webhooks/</guid>
      <description>&lt;p&gt;If you’re managing and using Tailscale along with several other users, it’s hard to keep track of what changes get made, even with &lt;a href=&#34;https://tailscale.com/kb/1203/audit-logging/&#34;&gt;audit logs&lt;/a&gt;. For example, another admin might make an update, or an event that you need to react to could occur — such as a node needing &lt;a href=&#34;https://tailscale.com/kb/1099/device-authorization/&#34;&gt;authorization&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Webhooks are now available so you can get notified when common tailnet management and misconfiguration events occur, such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A new node joins your tailnet&lt;/li&gt;
&lt;li&gt;A new node needs authorization&lt;/li&gt;
&lt;li&gt;A new node has been authorized&lt;/li&gt;
&lt;li&gt;Your tailnet policy file was updated&lt;/li&gt;
&lt;li&gt;You have a subnet router or exit node with IP forwarding disabled&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can configure webhooks to be sent to any HTTPS endpoint — for example, receiving notifications of changes to your ACLs in a Slack channel. Webhooks are owned by the tailnet, so any webhooks set up by an admin will continue to work even if that admin leaves the company.&lt;/p&gt;
&lt;p&gt;To set up a webhook, navigate to the &lt;a href=&#34;https://login.tailscale.com/admin/settings/webhooks&#34;&gt;webhooks tab of the admin console&lt;/a&gt;. &lt;a href=&#34;https://tailscale.com/kb/1213/webhooks/&#34;&gt;Read the documentation&lt;/a&gt; to learn more about how to set up webhooks.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MagicDNS is generally available</title>
      
      
      <link>https://tailscale.com/blog/magicdns/</link>
      <pubDate>Thu, 20 Oct 2022 14:30:00 +0000</pubDate>
      <author>Charlotte Brandhorst-Satzkorn, Maisem Ali</author>
      <guid>https://tailscale.com/blog/magicdns/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://tailscale.com/kb/1033/ip-and-dns-addresses/&#34;&gt;Tailscale automatically assigns IP addresses&lt;/a&gt; for every unique device in your network, giving each device an IP address no matter where it is located. We further improved on this with &lt;a href=&#34;https://tailscale.com/kb/1081/magicdns/&#34;&gt;MagicDNS&lt;/a&gt;, which automatically registers a human-readable, easy-to-remember DNS name for each device —  so you don’t need to use an IP address to access your devices. This means you can access the device &lt;code&gt;monitoring&lt;/code&gt;, even if it moves from on-prem to the cloud, without ever needing to know its IP address in the first place.&lt;/p&gt;
&lt;p&gt;MagicDNS is &lt;em&gt;such&lt;/em&gt; a useful feature that it’s been frustrating for us that not all Tailscale users know about it. We’re surprised that we often get suggestions like, “It would be great if Tailscale could just run a small DNS server for me” — when it already does! So we’re particularly excited to share that as of today, &lt;strong&gt;MagicDNS is generally available, and it’s enabled by default for new tailnets!&lt;/strong&gt; (Already a Tailscale user, but not using MagicDNS yet? Click “Enable MagicDNS” in the &lt;a href=&#34;https://login.tailscale.com/admin/dns&#34;&gt;DNS page&lt;/a&gt; of the admin console to get going.)&lt;/p&gt;

    
    

&lt;figure class=&#34;image-wide&#34;&gt;
        &lt;img src=&#34;https://tailscale.com/blog/magicdns/magicdns.gif&#34; alt=&#34;Animation of enabling MagicDNS and accessing a file server on port 8000 of a device using a human-readable DNS name for a device.&#34; /&gt;
    
    &lt;figcaption&gt;
        &lt;p&gt;With MagicDNS enabled, you can access a device with human-readable DNS name.&lt;/p&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;If you’re already using MagicDNS, your tailnet has been automatically assigned a new tailnet name of the form &lt;code&gt;tail&amp;lt;hex&amp;gt;.ts.net&lt;/code&gt;, in addition to the existing name &lt;code&gt;&amp;lt;domain&amp;gt;.beta.tailscale.net&lt;/code&gt;&lt;/strong&gt;. If you’re sharing nodes with the &lt;code&gt;beta&lt;/code&gt; name, we ask you to migrate to the new tailnet name. The existing &lt;code&gt;beta&lt;/code&gt; name will be supported until at least November 1, 2023.&lt;/p&gt;
&lt;h3 id=&#34;magicdns-automatically-creates-a-dns-entry-for-your-device-name&#34;&gt;MagicDNS automatically creates a DNS entry for your device name&lt;/h3&gt;
&lt;p&gt;“All” MagicDNS does is automatically register a DNS name for every device in your network. With MagicDNS enabled, every device in your tailnet runs its own DNS server, built into the Tailscale client. Then, when you add a new device to your tailnet or modify ACLs, the set of devices the new device can access (known as a &lt;em&gt;netmap&lt;/em&gt;) is pushed to your device from the Tailscale coordination server, including registering DNS entries for other devices you can access. If you try to access &lt;code&gt;http://monitoring&lt;/code&gt; on your device, it will first check your built-in Tailscale DNS server to see if it’s an address specified by Tailscale. If it is, it will forward the traffic to that device; if it’s not, it will pass the request on to your other DNS servers. This works wherever you’re using the device’s IP address, including in your browser or on the command line. Keeping all of these DNS entries on the device is also great for security and privacy, as unencrypted DNS queries don’t leave your device.&lt;/p&gt;
&lt;p&gt;Your device is automatically registered in MagicDNS based on the device name — for example, &lt;code&gt;alices-macbook-pro&lt;/code&gt;. If you change your device’s name, the MagicDNS entry will automatically change. If you have a specific machine name you’d like to use to reference your device, then &lt;a href=&#34;https://tailscale.com/kb/1098/machine-names/#renaming-a-machine&#34;&gt;edit the device’s name in Tailscale&lt;/a&gt;, or if you’re scripting servers for easy access, &lt;a href=&#34;https://tailscale.com/kb/1080/cli/#up&#34;&gt;use &lt;code&gt;tailscale up&lt;/code&gt; and pass in the &lt;code&gt;--hostname&lt;/code&gt; flag&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To learn more about how MagicDNS works, see &lt;a href=&#34;https://tailscale.com/blog/magicdns-why-name&#34;&gt;our blog post covering just this&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;fixing-a-long-tail-of-dns-bugs&#34;&gt;Fixing a long tail of DNS bugs&lt;/h3&gt;
&lt;p&gt;We’ve been working heads-down on MagicDNS for several months now. To get to the point where we could call MagicDNS generally available, we had to fix a lot of bugs. (It basically became a rite of passage for new Tailscalars to fix a MagicDNS bug before they could move on to other projects.) We’ve implemented these fixes and improvements in the last several client releases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In &lt;a href=&#34;https://tailscale.com/changelog/#2022-01-12-client&#34;&gt;v1.20&lt;/a&gt;, we removed Android’s dependency on fallback resolvers. An Android device making a DNS query that Tailscale could not resolve now forwards the query to the OS’ DNS server, instead of requiring a global DNS server to be specified in Tailscale.&lt;/li&gt;
&lt;li&gt;Also in v1.20, Tailscale clients using an &lt;a href=&#34;https://tailscale.com/kb/1103/exit-nodes/&#34;&gt;exit node&lt;/a&gt; started forwarding DNS queries to the exit node.&lt;/li&gt;
&lt;li&gt;In &lt;a href=&#34;https://tailscale.com/changelog/#2022-04-22-client&#34;&gt;v1.24&lt;/a&gt;, we added pointer records for Tailscale services to MagicDNS to return records with Tailscale service IP information.&lt;/li&gt;
&lt;li&gt;In &lt;a href=&#34;https://tailscale.com/changelog/#2022-06-06-client&#34;&gt;v1.26&lt;/a&gt;, we made MagicDNS use &lt;a href=&#34;https://pkg.go.dev/tailscale.com/wgengine/netstack&#34;&gt;the netstack&lt;/a&gt; for packet handling, which added DNS-over-TCP and reassembly of fragmented UDP responses to handle particularly large responses.&lt;/li&gt;
&lt;li&gt;In v1.26, we also added the built-in DNS server to &lt;a href=&#34;https://github.com/tailscale/tailscale/wiki/Tailscaled-on-macOS&#34;&gt;tailscaled running on macOS&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;In &lt;a href=&#34;https://tailscale.com/changelog/#2022-07-18-client&#34;&gt;v1.28&lt;/a&gt;, we updated the iOS client to use netstack for DNS.&lt;/li&gt;
&lt;li&gt;Also in v1.28, we implemented automatic support for servers running on AWS, GCP, and Azure, and removed the requirement for fallback DNS servers.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All to say, this has been a long time coming. We’re at a point where we believe (and hope!) that we’ve addressed all the known bugs with MagicDNS. (As always, if you find any issues with Tailscale, please let us know by &lt;a href=&#34;https://tailscale.com/contact/support/&#34;&gt;contacting support&lt;/a&gt; or &lt;a href=&#34;https://github.com/tailscale/tailscale&#34;&gt;filing an issue on GitHub&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;Just because MagicDNS is &lt;a href=&#34;https://tailscale.com/kb/1167/release-stages/#general-availability-ga&#34;&gt;generally available&lt;/a&gt; doesn’t mean we’re done with MagicDNS. We still have work to do — for example, we know you’d like us to add support for &lt;a href=&#34;https://github.com/tailscale/tailscale/issues/1543&#34;&gt;custom records&lt;/a&gt; and &lt;a href=&#34;https://github.com/tailscale/tailscale/issues/3847&#34;&gt;subdomains&lt;/a&gt; — and it’s &lt;a href=&#34;https://tailscale.com/blog/2021-09-private-dns-with-magicdns/#future-work&#34;&gt;something we’ve been hoping to do for a long time, too&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;magicdns-is-enabled-by-default-for-new-tailnets&#34;&gt;MagicDNS is enabled by default for new tailnets&lt;/h3&gt;
&lt;p&gt;Now that we feel confident MagicDNS will work in even the most thorny edge cases and haunted networks, we’ve enabled MagicDNS by default for all new tailnets.&lt;/p&gt;
&lt;p&gt;If you already have a tailnet but aren’t using MagicDNS, all you have to do is enable it! Given the fixes to the past several client releases, we recommend you first update your devices to at least Tailscale v1.20 (&lt;a href=&#34;https://login.tailscale.com/admin/machines?q=version%3A%3C1.20.0&#34;&gt;see your devices that are running older versions&lt;/a&gt;), and then turn MagicDNS on in the &lt;a href=&#34;https://login.tailscale.com/admin/dns&#34;&gt;DNS page&lt;/a&gt; of the admin console, by clicking “Enable MagicDNS”.&lt;/p&gt;
&lt;h3 id=&#34;new-tailhextsnet-tailnet-name-format&#34;&gt;New &lt;code&gt;tail&amp;lt;hex&amp;gt;.ts.net&lt;/code&gt; tailnet name format&lt;/h3&gt;
&lt;p&gt;As we enable MagicDNS for all tailnets, we’re changing how tailnet names are assigned. All tailnets will have a tailnet name of the form &lt;code&gt;tail&amp;lt;hex&amp;gt;.ts.net&lt;/code&gt;, with a random hex. This is what will be used for MagicDNS, node sharing, and HTTPS in Tailscale. You can see your tailnet’s name in the &lt;a href=&#34;https://login.tailscale.com/admin/dns&#34;&gt;DNS page&lt;/a&gt; of the admin console. From there, you can also change your tailnet name to a randomly selected set of words (at this time, you can’t customize it further).&lt;/p&gt;
&lt;p&gt;If you’ve already enabled MagicDNS, node sharing, or HTTPS, your tailnet already has a name in the form &lt;code&gt;&amp;lt;domain&amp;gt;.beta.tailscale.net&lt;/code&gt;, &lt;code&gt;tailnet-&amp;lt;hex&amp;gt;.ts.net&lt;/code&gt; or &lt;code&gt;tail-scale.ts.net&lt;/code&gt;. Your unique tailnet name is used when registering DNS entries, &lt;a href=&#34;https://tailscale.com/kb/1084/sharing/&#34;&gt;sharing your device to other tailnets&lt;/a&gt;, and &lt;a href=&#34;https://tailscale.com/kb/1153/enabling-https/&#34;&gt;issuing TLS certificates&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Going forward, if you&amp;rsquo;re using a &lt;code&gt;beta&lt;/code&gt; tailnet name, we ask you to migrate to the newly added tailnet name. For node sharing, this means &lt;a href=&#34;https://tailscale.com/kb/1084/sharing/#sharing--magicdns&#34;&gt;asking your sharees to use the new tailnet name&lt;/a&gt;. The existing &lt;code&gt;beta&lt;/code&gt; name will be supported until at least November 1, 2023.&lt;/p&gt;
&lt;h3 id=&#34;access-a-device-without-remembering-an-ip-address&#34;&gt;Access a device without remembering an IP address&lt;/h3&gt;
&lt;p&gt;Using MagicDNS, you can access a device on your tailnet by its name on the command line:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ssh prod-database
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Or you can just navigate to a web address with the device name:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;http://monitoring
&lt;/code&gt;&lt;/pre&gt;&lt;figure&gt;
  &lt;iframe width=&#34;100%&#34; height=&#34;360&#34; src=&#34;https://www.youtube.com/embed/k_MxlYIHAvI&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
  &lt;figcaption&gt;Charlotte demonstrates how to use MagicDNS.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;To live in the magical world where this is possible, &lt;a href=&#34;https://login.tailscale.com/admin/dns&#34;&gt;enable MagicDNS on your tailnet&lt;/a&gt;, and &lt;a href=&#34;https://tailscale.com/kb/1081/magicdns/&#34;&gt;read more about using MagicDNS in our documentation&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Use configuration audit logs to track changes in your tailnet</title>
      
      
      <link>https://tailscale.com/blog/config-audit-logging/</link>
      <pubDate>Thu, 13 Oct 2022 10:00:00 -0400</pubDate>
      <author>Ramya Nagarajan, Jenny Zhang, Alessandro Mingione</author>
      <guid>https://tailscale.com/blog/config-audit-logging/</guid>
      <description>&lt;p&gt;Understanding what changes were made to your Tailscale network, and who made them, is critical for maintaining the security and integrity of your network. That’s why we’re making it even easier for admins — and your auditors! — to review changes made to your tailnet’s configuration, such as adding devices, updating ACLs, or changing DNS settings.&lt;/p&gt;
&lt;p&gt;Configuration audit logs, now in beta, capture changes made to your network in the &lt;a href=&#34;https://tailscale.com/blog/how-tailscale-works/#the-control-plane-key-exchange-and-coordination&#34;&gt;coordination server&lt;/a&gt;. &lt;strong&gt;If you’re an admin of a tailnet, you can access audit logs for your tailnet in the &lt;strong&gt;&lt;a href=&#34;https://tailscale.com/admin/logs&#34;&gt;&lt;strong&gt;logs tab&lt;/strong&gt;&lt;/a&gt;&lt;/strong&gt; of the admin console&lt;/strong&gt;. From the console, you’ll see a table of changes made to your network, with the most recent events first, and you can filter by user, time, and action taken. Configuration audit logs are also available via API.&lt;/p&gt;
    
    

&lt;figure class=&#34;image-wide&#34;&gt;
        &lt;img src=&#34;https://tailscale.com/assets/84113/1666207003-acl-change.gif&#34; alt=&#34;Recording showing how an edit to your network&amp;#39;s ACL policy is recorded in the configuration logs.&#34; /&gt;
    
    &lt;figcaption&gt;
        &lt;p&gt;When you make a change to the tailnet policy file, this event is recorded in configuration audit logs, including a diff of the file.&lt;/p&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Configuration audit logs are enabled by default, on all tailnets, and cannot be disabled. Configuration audit logs record write-actions made to your tailnet configuration, typically within seconds. For a list of all logged events, &lt;a href=&#34;https://tailscale.com/kb/1203/audit-logging/&#34;&gt;see the documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;investigate-or-audit-events&#34;&gt;Investigate or audit events&lt;/h3&gt;
&lt;p&gt;You can use configuration audit logs to review actions in your tailnet as part of an audit or ain incident response. For example, an admin could identify when a particular device was added, tagged, or advertised as an exit node, and by whom — enabling auditors or admins to determine the sequence of actions, and even intervene when necessary. You can also use configuration audit logs to track changes to ACLs to ensure these changes are in line with your access policies, or validate that all of an employee’s devices have been removed when they leave the company.&lt;/p&gt;
&lt;p&gt;Ready access to audit logs enables admins to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Quickly review actions performed by privileged users in your network.&lt;/li&gt;
&lt;li&gt;Monitor configuration changes, including changes to the tailnet policy file.&lt;/li&gt;
&lt;li&gt;Track, audit, and reverse unintentional changes.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;maintain-historical-logs&#34;&gt;Maintain historical logs&lt;/h3&gt;
&lt;p&gt;Configuration audit logs are retained for a period of 90 days, then automatically deleted. If you’d like to store logs for a longer period of time, you can use the API to export these to the long-term storage solution of your choice.&lt;/p&gt;
&lt;p&gt;You can also leverage the Tailscale API to programmatically retrieve audit logs, and ingest these in a SIEM or business intelligence (BI) solution. See documentation for the &lt;a href=&#34;https://tailscale.com/kb/1101/api/&#34;&gt;Tailscale API&lt;/a&gt;.&lt;/p&gt;
&lt;figure&gt;
&lt;iframe width=&#34;100%&#34; height=&#34;360&#34; src=&#34;https://www.youtube.com/embed/cW4_OCLABcc&#34; title=&#34;Configuration Audit Logging&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;figcaption&gt;Maya demonstrates how to use configuration audit logging.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Navigate to the &lt;a href=&#34;https://tailscale.com/admin/logs&#34;&gt;logs tab&lt;/a&gt; of the admin console to review your configuration audit logs.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
